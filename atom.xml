<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乙冗</title>
  
  
  <link href="https://xrect.github.io/atom.xml" rel="self"/>
  
  <link href="https://xrect.github.io/"/>
  <updated>2022-03-08T07:55:22.208Z</updated>
  <id>https://xrect.github.io/</id>
  
  <author>
    <name>Xrect</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM</title>
    <link href="https://xrect.github.io/2022/03/08/JVM/"/>
    <id>https://xrect.github.io/2022/03/08/JVM/</id>
    <published>2022-03-08T07:51:21.000Z</published>
    <updated>2022-03-08T07:55:22.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚-拟机基础概念"><a href="#虚-拟机基础概念" class="headerlink" title="虚+拟机基础概念"></a>虚+拟机基础概念</h1><h1 id="class文件结构"><a href="#class文件结构" class="headerlink" title="class文件结构"></a>class文件结构</h1><h1 id="内存加载过程"><a href="#内存加载过程" class="headerlink" title="内存加载过程"></a>内存加载过程</h1><h1 id="运行时内存结构"><a href="#运行时内存结构" class="headerlink" title="运行时内存结构"></a>运行时内存结构</h1><h1 id="JVM常用指令"><a href="#JVM常用指令" class="headerlink" title="JVM常用指令"></a>JVM常用指令</h1><h1 id="GC与调优"><a href="#GC与调优" class="headerlink" title="GC与调优"></a>GC与调优</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚-拟机基础概念&quot;&gt;&lt;a href=&quot;#虚-拟机基础概念&quot; class=&quot;headerlink&quot; title=&quot;虚+拟机基础概念&quot;&gt;&lt;/a&gt;虚+拟机基础概念&lt;/h1&gt;&lt;h1 id=&quot;class文件结构&quot;&gt;&lt;a href=&quot;#class文件结构&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法复习</title>
    <link href="https://xrect.github.io/2022/03/05/%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
    <id>https://xrect.github.io/2022/03/05/%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-03-05T02:29:57.000Z</published>
    <updated>2022-03-06T08:41:11.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><p><code>^运算可以即，相同为1，不同为0；但可以简单记为2进制不进位的加法</code></p><h3 id="异或性质"><a href="#异或性质" class="headerlink" title="异或性质"></a>异或性质</h3><ul><li><p><code>0 ^ N = N </code>     <code>N ^ N = 0  </code></p></li><li><p>异或运算满足交换律和结合律  </p></li><li><p>不用额外变量交换两个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换a，b</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br></pre></td></tr></table></figure></li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="1-一个数出现奇数次"><a href="#1-一个数出现奇数次" class="headerlink" title="1.一个数出现奇数次"></a>1.一个数出现奇数次</h4><p> 一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到这一个数？</p><blockquote><h5 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个n代表，有个n个长度大小的数组</span><br><span class="line">第二行输入一个长度为n的数组</span><br></pre></td></tr></table></figure><h5 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出这个数组中出现奇数次的数</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 1 1 2 1</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：异或运算满足交换律</span></span><br><span class="line"><span class="comment">所以 1 1 1 2 1就是 1 1 1 1 2的异或</span></span><br><span class="line"><span class="comment">遍历数组，每个都异或一次就行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printOneOdd</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur : arr) &#123;</span><br><span class="line">            ret ^= cur;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, ret = <span class="number">0</span>, temp;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">printOneOdd(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-两个数出现奇数次"><a href="#2-两个数出现奇数次" class="headerlink" title="2. 两个数出现奇数次"></a>2. 两个数出现奇数次</h4><p>给定一个数字arr，其中只有两个数字出现了奇数次，其它数字都出现了偶数次，按照从小到大顺序输出这两个数。 </p><blockquote><h5 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个n，</span><br><span class="line">第二行输入n个数</span><br></pre></td></tr></table></figure><h5 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出出现奇数次的两个数，按照从小到大的顺序</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 1 2 3</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><p>示例2</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">11 22 11 23 23 45</span><br></pre></td></tr></table></figure><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22 45</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：假设两个数字为 a，b</span></span><br><span class="line"><span class="comment">（1）遍历数组，每个都异或一次后就剩下 a^b</span></span><br><span class="line"><span class="comment">（2）肯定有两个数字出现奇数次,所以a不等于b，即a^b的二进制表示肯定有一个或多个位置的1（我们只需要拿到最右边的1就行）</span></span><br><span class="line"><span class="comment">（3）将数组中的数字分批次为： </span></span><br><span class="line"><span class="comment">* 在a^b二进制最右边的1的位置也是1的一批（选中这一批，一起异或，然后得到要找的其中一个数）</span></span><br><span class="line"><span class="comment">* 在a^b二进制最右边的1的位置是0的一批</span></span><br><span class="line"><span class="comment">（4）假设找到的数字是a，再将a ^ (a^b) 得到b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTwoOdd</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> eor = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur : arr) &#123;</span><br><span class="line">            eor ^= cur;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//精妙绝伦！！！(取到其二进制最右边的1)</span></span><br><span class="line">        <span class="keyword">int</span> rightOne = eor &amp; (~eor + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//记录某个位置是1的数的异或,最后的得到的数字是a</span></span><br><span class="line">        <span class="keyword">int</span> onlyOne = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp : arr) &#123;</span><br><span class="line">            <span class="comment">//如果那个位置也有1,就一起异或</span></span><br><span class="line">            <span class="keyword">if</span> ((rightOne &amp; tmp) != <span class="number">0</span>)</span><br><span class="line">            onlyOne ^= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//得到b</span></span><br><span class="line">        <span class="keyword">int</span> another = onlyOne ^ eor;</span><br><span class="line">        <span class="comment">//从小到大输出</span></span><br><span class="line">        <span class="keyword">if</span> (another &gt; onlyOne)</span><br><span class="line">        System.out.println(onlyOne+<span class="string">&quot; &quot;</span>+ another);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(another+<span class="string">&quot; &quot;</span>+ onlyOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, ret = <span class="number">0</span>, temp;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">printTwoOdd(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>得到二进制最右边的1</p><p><code>int rightOne = eor &amp; (~eor + 1);</code></p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h4 id="3-用递归方法找一个数组中的最大值"><a href="#3-用递归方法找一个数组中的最大值" class="headerlink" title="3. 用递归方法找一个数组中的最大值"></a>3. 用递归方法找一个数组中的最大值</h4><p><strong>输入描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个n，代表数组的长度</span><br><span class="line">第二行，输入n个数</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出这个数组中的最大值</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right)</span><br><span class="line">            <span class="keyword">return</span> arr[left];</span><br><span class="line">        <span class="comment">//不写成（left + right）/ 2,是因为left + right可能溢出， 位运算的右移比/运算更快</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//  分的时候不应该，[left, mid - 1]，因为mid可能等于0，导致异常</span></span><br><span class="line">        <span class="keyword">int</span> leftMax = max(arr, left, mid);</span><br><span class="line">        <span class="keyword">int</span> rightMax = max(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftMax, rightMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, ret = <span class="number">0</span>, temp;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        ret = max(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><blockquote><p>请实现有重复数字的有序数组的二分查找。</p><p>输出在数组中第一个大于等于查找值的位置，如果数组中不存在这样的数，则输出数组长度加1。</p><h5 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行两个正整数n，v(1&lt;=n&lt;=100000，1&lt;=v&lt;=100000)，分别表示数组长度与查找值。</span><br><span class="line"></span><br><span class="line">第二行n个正整数a1,a2,...,an(1&lt;=a1&lt;=a2&lt;=...&lt;=an&lt;=n)表示有序数组。</span><br></pre></td></tr></table></figure><h5 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出在数组中第一个大于等于查找值的位置，如果数组中不存在这样的数，则输出数组长度加一。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2 4 4 5</span><br></pre></td></tr></table></figure><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>示例2</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2 3 3 5</span><br></pre></td></tr></table></figure><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>示例3</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2 2 3 3</span><br></pre></td></tr></table></figure><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  二分查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = arr.length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt;= target) &#123;</span><br><span class="line">                ret = mid + <span class="number">1</span> &lt; ret ? mid + <span class="number">1</span> : ret;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, v, ret;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        v = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        ret = binarySearch(arr, v);</span><br><span class="line"></span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><blockquote><p>给你一个n代表有n个数字，然后你需要使用归并排序将这些数字从小到大排好。</p><h5 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个n，代表有n个数字</span><br><span class="line">第二行输入n个数</span><br></pre></td></tr></table></figure><h5 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出排序好后的n个数</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 3 2 1</span><br></pre></td></tr></table></figure><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂</summary>
      
    
    
    
    <category term="复习" scheme="https://xrect.github.io/categories/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://xrect.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java复习</title>
    <link href="https://xrect.github.io/2022/03/05/Java%E5%A4%8D%E4%B9%A0/"/>
    <id>https://xrect.github.io/2022/03/05/Java%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-03-05T02:28:55.000Z</published>
    <updated>2022-03-07T01:03:29.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java复习"><a href="#Java复习" class="headerlink" title="Java复习"></a>Java复习</h1><h2 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h2><p>面向对象程序设计（简称OOP Object Oriented Programming）。Java是完全面向对象的。</p><p>面向对象的程序是由对象组成的，每个对象包含对用户公开的特定功能部分和隐藏的实现部分。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>​      </p><h2 id="Java核心API"><a href="#Java核心API" class="headerlink" title="Java核心API"></a>Java核心API</h2><h3 id="系统相关类"><a href="#系统相关类" class="headerlink" title="系统相关类"></a>系统相关类</h3><h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><ol><li><p>System类代表当前Java程序的运行平台 </p></li><li><p>System类不允许被实例化， 它所提供的变量和方法全部是静态的</p></li><li><p>System类提供了代表标准、标准输出、错误输出的静态变量</p></li><li><p>System类提供了访问环境变量、访问系统属性、加载文件、加载动态链接库等方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取系统所有的环境变量</span></span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; map = System.getenv();</span><br><span class="line">        <span class="keyword">for</span>(String key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h4><ol><li>Runtime类代表Java程序的运行环境</li><li>Runtime类符合单例模式，我们只能提供getRuntime() 获取该类型唯一的实例</li><li>Runtime类提供了访问JVM相关信息的方法，如获取CPU数量、获取空闲内存数等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  返回JVM可用的CPU数量</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"><span class="comment">//返回JVM中内存总量</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().freeMemory());</span><br><span class="line"><span class="comment">//  返回JVM中的可用内存</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().maxMemory());</span><br></pre></td></tr></table></figure><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p><a href="https://segmentfault.com/a/1190000039132885"><strong>equals和==的区别是什么？</strong></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解释代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">          1. == 对于基本类型和引用类型的作用效果是不同的</span></span><br><span class="line"><span class="comment">                基本类型： 比较的是值是否相同</span></span><br><span class="line"><span class="comment">                引用类型： 比较的是引用是否相同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        String x = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">        String y = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">        String z = <span class="keyword">new</span> String(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">        System.out.println(x == y); <span class="comment">//  true</span></span><br><span class="line">        System.out.println(x == z); <span class="comment">//  false(开辟了一个新的内存空间)</span></span><br><span class="line">        System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(x.equals(z)); <span class="comment">// true(String和Integer等重写了equals方法，把它变成了值比较)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** TODO String类重写的equals源码</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public boolean equals(Object anObject) &#123;</span></span><br><span class="line"><span class="comment">         *         if (this == anObject) &#123;</span></span><br><span class="line"><span class="comment">         *             return true;</span></span><br><span class="line"><span class="comment">         *         &#125;</span></span><br><span class="line"><span class="comment">         *         if (anObject instanceof String) &#123;</span></span><br><span class="line"><span class="comment">         *             String aString = (String)anObject;</span></span><br><span class="line"><span class="comment">         *             if (!COMPACT_STRINGS || this.coder == aString.coder) &#123;</span></span><br><span class="line"><span class="comment">         *                 return StringLatin1.equals(value, aString.value);</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;</span></span><br><span class="line"><span class="comment">         *         return false;</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//equals 本质上就是 ==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** TODO Object类的equals实现</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">         *         return (this == obj);</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Tips</strong></p><blockquote><p><strong>IntellJ IDEA 中JAVA代码的任务标记</strong></p><p>// TODO: 表示在此处将要实现的功能，提醒你在后续阶段将会在此处添加代码<br>// FIXME: 表示此处的代码逻辑有出入，或者根本不能运行，提醒你在后续阶段将会修改此处代码</p></blockquote><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><ul><li><p><strong>规范</strong></p><ul><li>文档注释以<code>/**</code>开始，以<code>*/</code>结束</li><li>提取以<code>public</code>、<code>protected</code>修饰的内容</li><li>提取类、接口、构造方法、成员变量、成员方法、内部类之前的注释</li></ul></li><li><p><strong>文档注释标记</strong></p><table><thead><tr><th>标记</th><th>位置</th><th>说明</th></tr></thead><tbody><tr><td>@author</td><td>类、接口</td><td>指定程序的作者</td></tr><tr><td>@version</td><td>类、接口</td><td>指定程序的版本</td></tr><tr><td>@see</td><td>类、接口、构造方法、成员方法、成员变量</td><td>“参见”，用于指定交叉参考的内容</td></tr><tr><td>@deprectated</td><td>类、接口、构造方法、成员方法、成员变量</td><td>不再推荐使用</td></tr><tr><td>@param</td><td>构造方法、成员方法</td><td>方法参数的说明信息</td></tr><tr><td>@return</td><td>构造方法、成员方法</td><td>方法返回值说明信息</td></tr><tr><td>@exception</td><td>构造方法、成员方法</td><td>抛出异常的类型</td></tr><tr><td>@throws</td><td>构造方法、成员方法</td><td>抛出的异常，和@exception同义</td></tr></tbody></table></li><li><p><strong>Javadoc命令</strong></p><ul><li><p>规范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc 选项 java源文件/包</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javadoc</span><br><span class="line">-d C:\Users\Downloads\mydoc</span><br><span class="line">-windowtitle WINTITLE -doctitle DOCTITLE -header HEADER</span><br><span class="line">-encoding utf-<span class="number">8</span> -charset utf-<span class="number">8</span> -author -version *.java</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>​    </p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><ol><li>Java是面向对象的语言， 在Java中一切皆对象</li><li>八种基本数据类型例外，不具备“对象”的特性</li><li>为解决这个问题，Java为每个基本类型都定义了一个对应的引用类型，他们是基本类型的包装类</li></ol><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><blockquote><p>包装类都在<code>Java.lang</code>包下</p></blockquote><ul><li>JDK1.5之前<ol><li>通过包装类提供的构造器，可以将基本数据转为包装类型的对象</li><li>通过包装类提供的xxxValue()方法，可以获得该对象中的包装数据</li></ol></li><li>JDK1.5之后<ol><li>JDK1.5提供了自动装箱、自动拆箱功能</li><li>自动装箱：可以把一个基本类型的数据直接赋值给对应的包装类型</li><li>自动拆箱：可以把一个包装对象直接赋值给对应的基本类型</li></ol></li></ul><h4 id="包装类详解"><a href="#包装类详解" class="headerlink" title="包装类详解"></a>包装类详解</h4><blockquote><p>包装类是不可变类</p></blockquote><ol><li>使用private和final修饰成员变量</li><li>提供带参数的构造器，用于初始化上述成员变量</li><li>仅提供获取成员变量的方法，不提供修改的方法</li></ol><p><strong>包装类都是final，但是只意味着类不能被继承，并不意味着它的实例对象不可改变</strong></p><blockquote><p>​    对于final修饰的变量来说，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的，也就是说在对其初始化之后便不能再让其指向另一个对象</p></blockquote><h4 id="包装类中的静态变量"><a href="#包装类中的静态变量" class="headerlink" title="包装类中的静态变量"></a>包装类中的静态变量</h4><ol><li>MAX_VALUE,表示该类型的最大值</li><li>MIN_VALUE，表示该类型的最小值</li></ol><blockquote><p>除了Boolean类型，都定义了上述静态变量</p></blockquote><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="1-为什么Java代码可以实现一次编写、到处运行？"><a href="#1-为什么Java代码可以实现一次编写、到处运行？" class="headerlink" title="1.为什么Java代码可以实现一次编写、到处运行？"></a>1.为什么Java代码可以实现一次编写、到处运行？</h4><p>JVM（Java虚拟机）是跨平台的关键。</p><p>在程序运行之前，Java源代码（.java）需要经过编译器编译成字节码（.class）。在程序运行时，JVM负责将字节码翻译成特定平台下的机器码并运行，即，只要在不同平台上安装对应的JVM，就可以运行字节码文件。</p><p>同一份Java源代码在不同平台上运行，不需要做任何的改变，并且只需要编译一次。编译好的字节码是通过JVM这个中间“桥梁”实现跨平台的，JVM是与平台相关的软件，它能将统一的字节码翻译成该平台的机器码。</p><blockquote><p><strong>注意</strong></p><ol><li>编译的结果只能生成字节码、不是机器码，字节码不能直接运行，需要通过JVM翻译成机器码才能运行</li><li>跨平台的是Java程序，而不是JVM，JVM是用C/C++开发的软件，不同平台需要安装不同版本的JVM</li></ol></blockquote><h4 id="2-一个Java文件里可以有多个类吗（不包含内部类）？"><a href="#2-一个Java文件里可以有多个类吗（不包含内部类）？" class="headerlink" title="2.一个Java文件里可以有多个类吗（不包含内部类）？"></a>2.一个Java文件里可以有多个类吗（不包含内部类）？</h4><ol><li>一个java文件里可以有多个类，但最多只有一个被public修饰的类</li><li>如果java文件中包含public修饰的类，那么这个类的类名必须和java文件名相同</li></ol><h4 id="3-说一说你对Java访问权限的了解"><a href="#3-说一说你对Java访问权限的了解" class="headerlink" title="3.说一说你对Java访问权限的了解"></a>3.说一说你对Java访问权限的了解</h4><p>Java语言为我们提供了三种访问权限，即private、protected、public，在使用这些修饰符访问目标时，一共可以形成四种访问权限，即private、defalut（不加任何修饰符时的访问权限）、protected、public。</p><ul><li><p>在修饰成员变量、成员方法时，该成员的四种访问权限含义如下：</p><ul><li>private：该成员可以被该类内部成员访问</li><li>defalut：该成员可以被该类内部成员访问，也可以被同一包下其他的类访问</li><li>protected：该成员可以被该类内部成员访问，也可以被同一包下其他类访问，还可以被它的子类访问</li><li>public：该成员可以被任意包、任意类的成员访问。</li></ul></li><li><p>在修饰类时，类只有两种访问权限，对应的访问权限含义如下：</p><ul><li>default：该类可以被同一包下的其他类访问</li><li>public：该类可以被任意包下，任意类访问</li></ul></li></ul><h4 id="4-介绍一下Java的数据类型"><a href="#4-介绍一下Java的数据类型" class="headerlink" title="4.介绍一下Java的数据类型"></a>4.介绍一下Java的数据类型</h4><p>Java数据类型包括基本数据类型和引用数据类型两大类</p><ul><li><p>基本数据类型有8个，可以分为4个小类，分别是整数类型（byte/short/int/long）、浮点类型（float/double）、字符类型（char）、布尔类型（boolean）。其中，4个整数类型中，int类型最为常用。2个浮点类型中，double最为常用。另外，在这8个基本类型中，除了布尔类型之外的其他7个类型，都可以看做数字类型，他们之间可以进行类型转换。</p></li><li><p>引用类型就是对一个对象的引用，根据引用对象类型的不同，可以将引用类型分为3类，即数组、类、接口类型。引用类型本质上就是通过指针，指向堆中对象所持有的内存空间，只是Java语言不再沿用指针这个说法。</p></li></ul><blockquote><p>byte: 1字节（8位），数据范围是 <code>- 2^7 ~ 2^7 - 1 </code>   </p><p>short: 2字节（16位），数据范围是 <code>- 2^15 ~ 2^15 - 1 </code>   </p><p>int: 4字节（32位），数据范围是 <code>- 2^31 ~ 2^31 - 1 </code>    </p><p>long: 8字节（64位），数据范围是 <code>-2^63 ~ 2^63 - 1</code></p><p>float: 4字节（32位），数据范围大约是 <code>-3.4 * 10^38 ~ 3.4*10^38</code></p><p>double: 8字节（64位），数据范围大约是<code>- 1.8 * 10^308 ~ 1.8 * 10^308</code></p><p>char：2字节（16位），数据范围大约是<code>- 1.8 *10^308 ~ 1.8 * 10^308</code></p><p>boolean：Java规范没有明确的规定，不同的JVM有不同的实现机制</p></blockquote><h4 id="5-int类型的数据范围是多少？"><a href="#5-int类型的数据范围是多少？" class="headerlink" title="5.int类型的数据范围是多少？"></a>5.int类型的数据范围是多少？</h4><p>int类型占4字节（32位），数据范围是<code>-2^31 ~ 2^31 - 1</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java复习&quot;&gt;&lt;a href=&quot;#Java复习&quot; class=&quot;headerlink&quot; title=&quot;Java复习&quot;&gt;&lt;/a&gt;Java复习&lt;/h1&gt;&lt;h2 id=&quot;对象与类&quot;&gt;&lt;a href=&quot;#对象与类&quot; class=&quot;headerlink&quot; title=&quot;对</summary>
      
    
    
    
    <category term="复习" scheme="https://xrect.github.io/categories/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://xrect.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android复习</title>
    <link href="https://xrect.github.io/2022/03/05/Android%E5%A4%8D%E4%B9%A0/"/>
    <id>https://xrect.github.io/2022/03/05/Android%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-03-05T02:26:09.000Z</published>
    <updated>2022-03-10T03:56:42.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h1><blockquote><p>四大组件都要在AndroidManifest.xml中注册才能生效</p></blockquote><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>Android中，Activity是所有程序的根本，所有程序的流程都运行在Activity之中，Activity算是开发者遇到的最频繁的模块之一，以及用户最直接接触的模块。一个Android程序通常由多个Activity组成，这多个Activity相互关联，彼此跳转。假设当前Activity为A，新打开一个Activity B；那么Activity A将会进入返回栈，Activity B位与栈顶。</p><h3 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h3><h4 id="1-典型情况下的生命周期分析"><a href="#1-典型情况下的生命周期分析" class="headerlink" title="1. 典型情况下的生命周期分析"></a>1. 典型情况下的生命周期分析</h4><p>（1）onCreate：表示Activity正在被创建，这是生命周期的第一个方法。可以在这个方法中做一些初始化工作，比如调用setContentView去加载布局资源、初始化Activity所需数据。</p><p>（2）onRestart：表示Activity正在重新启动。一般情况下，当目前的Activity由不可见重新变为可见状态的时候，onRestart就会被调用。这种情况一般是用户行为导致的，比如用户按Home键切换到桌面或者用户打开了一个新的Activity，当前Activity就会暂停（即onPause和onStop被执行），接着用户又回到了这个Activity。</p><p>（3）onStart：表示Activity正在被启动，即将开始，Activity已经可见了，但是没有出现在前台，无法和用户交互。可以理解为Activity已经显示了，但我们看不见。</p><p>（4）onResume：表示Activity已经可见，并且出现在前台并开始活动了。</p><blockquote><p>注意，onStart和onResume都表示Activity已经可见，但是onStart时的Activity还在后台，onResume时才显示到前台</p></blockquote><p>（5）onPause：表示Activity正在停止，正常情况下，onStop紧着就会被调用。在特殊情况下，如果快速的回到当前Activity，那么onResume就会被调用</p><blockquote><p>注意不能执行太耗时的操作，因为onPause必须先执行完，新Activity的onResume才会执行，以免影响到新Activity的显示</p></blockquote><p>（6）onStop：表示Activity即将停止，可以做一些稍微重量级的回收工作，也不能太耗时</p><p>（7）onDestroy：表示Activity即将销毁，这是Activity生命周期的最后一个回调，可以做一些回收工作和最终资源的释放</p><p><img src="D:\浏览器下载内容\cardimages\ActivityLife.jpg" alt="ActivityLife"></p><h4 id="onCreate和onStart的区别"><a href="#onCreate和onStart的区别" class="headerlink" title="onCreate和onStart的区别"></a>onCreate和onStart的区别</h4><ul><li>onCreate在系统首次创建Activity时触发，Activity会在创建后进入已创建状态</li><li>Activity进入“已开始”状态时，系统会调用此回调。onStart()调用使Activity对用户可见，因为应用会为Activity进入前台支持交互做准备</li></ul><blockquote><p>onStart()方法会非常快速完成，并且与“已创建”状态一样，Activity不会一直处于“已开始状态”。一旦此回调结束，Activity便会进入已恢复状态，系统将调用onResume()方法。</p></blockquote><h4 id="onPause和onStop的区别"><a href="#onPause和onStop的区别" class="headerlink" title="onPause和onStop的区别"></a>onPause和onStop的区别</h4><p>onPause()执行非常简单，而且不一定有足够的时间来保存操作。因此，不应该用onPause()来保存应用或用户数据等重要任务及耗时操作。</p><p>已进入已停止状态，系统将调用onStop()回调。在onStop()方法中，应用应释放或调整应用对用户不可见时的无用资源。</p><h3 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h3><ol><li><p>starand：标准模式，也是系统的默认模式。每次启动一个Acitivity都会创建一个新的实例，不管实例是否存在。</p></li><li><p>singleTop：栈顶复用模式。在这种模式下，如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent（）方法会被回调。</p><blockquote><p>如果新Activity的实例已存在但是不位于栈顶，那么新Acitivity仍会被重建。</p><p>假设现在栈内的情况是ABCD，A位于栈底，D位于栈顶。假设要再次启动D，如果D的启动模式为singleTop，那么栈内情况仍为ABCD；如果D的启动模式为standard，那么栈内情况为ABCDD</p></blockquote></li><li><p>singleTask：栈内复用模式。这是一种单实例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，系统也会回调onNewIntent。</p><blockquote><p>举例：</p><ul><li>比如当前任务栈S1中的情况为ABC，此时将Activity D以singleTask模式启动，其所需要的任务栈为S2，由于S2和D都不存在，所以系统会先创建任务栈S2，再创建D的实例并入栈到S2</li><li>另一种情况，假设D所需的任务栈为S1，其他情况和上面一样，那么由于S1已经存在，所以系统会先创建D的实例并将其入栈到S1</li><li>如果D所需的任务栈为S1，并且当前任务栈S1的情况为ADBC，根据栈内复用原则，此时D不会重新创建，系统会把D切换到栈顶并调用onNewIntent方法，同时由于singleTask具有clearTop效果，会导致栈内所有在D上面的Activity全部出栈，于是最终S1的情况为AD</li></ul></blockquote><ol start="4"><li>singleInstance：单实例模式。这是一种加强的singleTask模式，除了具有singleTask模式的所有特性外，还加强了一点，就是具有此种模式的Activity只能单独位于一个任务栈。</li></ol><h4 id="Activity指定启动模式的方法"><a href="#Activity指定启动模式的方法" class="headerlink" title="Activity指定启动模式的方法"></a>Activity指定启动模式的方法</h4><ul><li><p>通过AndroidManifest为Activity指定启动模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过在Intent中设置标志位来为Activity指定启动模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(MainActivity.<span class="keyword">this</span>, SecondActivity.Class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">setActivity(intent);</span><br></pre></td></tr></table></figure><blockquote><p>优先级的话，第二种的优先级要高于第一种</p><p>限定范围，第一种方式无法为Activity设定FLAG_ACTIVITY_CLEAR_TOP标识，而第二种方式无法为Activity指定singleInstance模式</p></blockquote></li></ul></li></ol><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h2 id="Broadcast-Receiver广播接收器"><a href="#Broadcast-Receiver广播接收器" class="headerlink" title="Broadcast Receiver广播接收器"></a>Broadcast Receiver广播接收器</h2><p>Android中的广播分为两类:</p><ul><li><p>标准广播</p><blockquote><p>标准广播（Normal broadcasts）是一种完全异步执行的广播，在广播发出之后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此他们之间没有任何先后顺序可言。</p><p>这种广播的效率会比较高，但同时也意味着它是无法被截断的。</p></blockquote></li><li><p>有序广播</p><blockquote><p>有序广播（Ordered broadcasts）是一种同步执行的广播，在广播发出之后，同一时刻只会有一个广播接收器能收到这条广播消息，当这个广播接收器的逻辑执行完毕后，广播才会继续传递。</p><p>所以此时的广播接收器是有先后顺序的，优先级高的广播接收器可以先收到广播消息，并且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。</p></blockquote></li></ul><h3 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h3><p>Android内置了很多系统级别的广播，我们可以在应用程序中通过监听这些广播来得到各种系统的状态信息。（比如，手机开机完成后，电池的电量发生变化等都会发出一条广播）</p><h4 id="1-动态注册监听网络变化"><a href="#1-动态注册监听网络变化" class="headerlink" title="1.动态注册监听网络变化"></a>1.动态注册监听网络变化</h4><p>广播接收器可以自由的对自己感兴趣的广播进行注册。注册广播的方式一般有两种：</p><ul><li>在代码中注册（动态注册）</li><li>在AndroidManifest.xml中注册（静态注册）</li></ul><p>通过动态注册的方式编写一个能够监听网络变化的程序</p><blockquote></blockquote><h3 id="实现强制下线功能"><a href="#实现强制下线功能" class="headerlink" title="实现强制下线功能"></a>实现强制下线功能</h3><p>强制下线功能比较常见，比如QQ号在别处登录了，就会强制将你挤下线。实现强制下线的思路：在界面弹出一个对话框，让用户无法进行任何其他操作，必须点击对话框中的确定按钮，然后回到登录界面。</p><p>强制下线需要先关闭掉所有活动，然后回到登录界面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以先创建一个ActivityCollector类用于管理所有的活动</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activities.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activities.remove(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Activity activity :</span><br><span class="line">                activities) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!activity.isFinishing())</span><br><span class="line">                activity.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建BaseActivity类作为所有活动的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ForceOfflineReceiver receiver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  onResume()和onPause()可以保证只有处于栈顶的活动才能收到这条强制下线广播，非栈顶的活动不应该也没必要去接收这条广播。</span></span><br><span class="line">    <span class="comment">//  当一个活动失去栈顶位置时就会自动取消广播接收器的注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;com.example.retrofittest.FORCE_OFFLINE&quot;</span>);</span><br><span class="line">        receiver = <span class="keyword">new</span> ForceOfflineReceiver();</span><br><span class="line">        registerReceiver(receiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        <span class="keyword">if</span> (receiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            unregisterReceiver(receiver);</span><br><span class="line">            receiver = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityCollector.addActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ForceOfflineReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</span><br><span class="line">            builder.setTitle(<span class="string">&quot;Warning&quot;</span>);</span><br><span class="line">            builder.setMessage(<span class="string">&quot;You are forced to be offline. Please try login again.&quot;</span>);</span><br><span class="line">            <span class="comment">//  将对话框设置为不可取消</span></span><br><span class="line">            builder.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">            builder.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    ActivityCollector.finishAll();</span><br><span class="line">                    Intent intent1 = <span class="keyword">new</span> Intent(context, LoginActivity.class);</span><br><span class="line">                    context.startActivity(intent1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityCollector.addActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再让MainActivity等都继承自BaseActivity</span></span><br></pre></td></tr></table></figure><p>在MainActivity中发出强制下线的广播</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button button1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button1 = findViewById(R.id.force_offline);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.example.retrofittest.FORCE_OFFLINE&quot;</span>);</span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ContentProvider-内容提供者"><a href="#ContentProvider-内容提供者" class="headerlink" title="ContentProvider 内容提供者"></a>ContentProvider 内容提供者</h2><h1 id="UI开发"><a href="#UI开发" class="headerlink" title="UI开发"></a>UI开发</h1><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="1-ListView的简单用法"><a href="#1-ListView的简单用法" class="headerlink" title="1. ListView的简单用法"></a>1. ListView的简单用法</h3><p>创建一个ListViewTest项目，修改activity_main中的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着修改MainActivity中的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private String[] data = &#123;&quot;Apple&quot;, &quot;Banana&quot;, &quot;Watermelon&quot;, &quot;Pear&quot;, &quot;Grape&quot;, &quot;Pineapple&quot;, &quot;Strawberry&quot;, &quot;Cherry&quot;, &quot;Mango&quot;, &quot;Apple&quot;, &quot;Orange&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">//隐藏标题栏</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        if (actionBar != null) &#123;</span><br><span class="line">            actionBar.hide();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayAdapter<span class="tag">&lt;<span class="name">String</span>&gt;</span> adapter = new ArrayAdapter<span class="tag">&lt;&gt;</span>(MainActivity.this, android.R.layout.simple_list_item_1, data);</span><br><span class="line">        ListView listView = findViewById(R.id.listView);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数组中的数据是无法直接传递给ListView的，所以我们需要借助适配器来完成。这里选择的是ArrayAdapter，然后在ArrayAdapter的构造函数中传入当前上下文、ListView子项布局的id，以及要适配的数据。<code>android.R.layout.simple_list_item_1</code>是Android内置的布局文件，里面只有一个TextView，可用于简单显示一段文本。</p><p>最后，调用ListView的setAdapter()方法，将构造好的适配器传递进去</p><h3 id="2-定制ListView的界面"><a href="#2-定制ListView的界面" class="headerlink" title="2. 定制ListView的界面"></a>2. 定制ListView的界面</h3><p>只能显示文本过于单调，我们为上面提供的每一种水果分别提供对应的图片。接着定义一个实体类Fruit，作为ListView适配器的适配类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.imageId = imageId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要为ListView大的子项指定一个我们自定义的布局fruit_item.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来需要创建一个自定义的适配器FruitAdapter，这个适配器继承自ArrayAdapter，并将泛型指定为Fruit类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Fruit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="keyword">int</span> textViewResourceId, <span class="meta">@NonNull</span> List&lt;Fruit&gt; objects)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, textViewResourceId, objects);</span><br><span class="line">        <span class="keyword">this</span>.resourceId = textViewResourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, <span class="meta">@Nullable</span> View convertView, <span class="meta">@NonNull</span> ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  获取当前项的Fruit实例</span></span><br><span class="line">        Fruit fruit = getItem(position);</span><br><span class="line">        View view = LayoutInflater.from(getContext()).inflate(resourceId, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//获取到ImageView的实例</span></span><br><span class="line">        ImageView fruitImage = view.findViewById(R.id.fruit_image);</span><br><span class="line">        <span class="comment">//获取到TextView的实例</span></span><br><span class="line">        TextView fruitName = view.findViewById(R.id.fruit_name);</span><br><span class="line">        fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        fruitName.setText(fruit.getName());</span><br><span class="line">        <span class="comment">//返回布局</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FruitAdapter重写了父类的一组构造函数，用于将上下文、ListView子项布局的id和数据都传递进来。然后又重写了getView()方法，这个方法在每个子项被滚动到屏幕内时会被调用。在getView()方法中，首先通过getItem()方法得到当前项的Fruit实例，然后使用LayoutInflater来为这个子项加载我们传入的布局。</p><p>LayoutInflater的inflate()方法接收3个参数，第三个参数指定成false，表示只让我们在父布局中声明的layout属性生效，但不会为这个View添加父布局，因为一旦有了父布局后，他就再也不能添加到ListVIew中。</p><p>最后修改MainActivity中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//  初始化水果数据</span></span><br><span class="line">        initFruits();</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(MainActivity.<span class="keyword">this</span>, R.layout.fruit_item, fruitList);</span><br><span class="line">        ListView listView = findViewById(R.id.listView);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Apple&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-提升ListView的运行效率"><a href="#3-提升ListView的运行效率" class="headerlink" title="3.提升ListView的运行效率"></a>3.提升ListView的运行效率</h3><p>目前我们的ListView的运行效率是很低的，因为在FruitAdapter的getView()方法中，每次都将布局重新加载了一遍，当ListView快速滚动的时候，就会成为性能的瓶颈。</p><p>我们发现，getView()方法还有一个convertView参数，这个参数用于将之前加载好的布局进行缓存，以便之后可以进行重用。</p><p>修改FruitAdapter的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, <span class="meta">@Nullable</span> View convertView, <span class="meta">@NonNull</span> ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  获取当前项的Fruit实例</span></span><br><span class="line">        Fruit fruit = getItem(position);</span><br><span class="line">        View view;</span><br><span class="line">    <span class="comment">//如果convertView为null，则用LayoutInflater去加载布局；不为null就重用</span></span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">             view = LayoutInflater.from(getContext()).inflate(resourceId, parent, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = convertView;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取到ImageView的实例</span></span><br><span class="line">        ImageView fruitImage = view.findViewById(R.id.fruit_image);</span><br><span class="line">        <span class="comment">//获取到TextView的实例</span></span><br><span class="line">        TextView fruitName = view.findViewById(R.id.fruit_name);</span><br><span class="line">        fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        fruitName.setText(fruit.getName());</span><br><span class="line">        <span class="comment">//返回布局</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们还可以继续优化，虽然现在不会再重复加载布局，但是每一次getView()方法还是会调用View的findViewById()方法来获取一次控件的实例。我们可以借助一个ViewHolder来进行优化。</p><p>继续修改FruitAdapter的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, <span class="meta">@Nullable</span> View convertView, <span class="meta">@NonNull</span> ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  获取当前项的Fruit实例</span></span><br><span class="line">        Fruit fruit = getItem(position);</span><br><span class="line">        View view;</span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">             view = LayoutInflater.from(getContext()).inflate(resourceId, parent, <span class="keyword">false</span>);</span><br><span class="line">             viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">             viewHolder.fruitImage = view.findViewById(R.id.fruit_image);</span><br><span class="line">             viewHolder.fruitText = view.findViewById(R.id.fruit_name);</span><br><span class="line">             view.setTag(viewHolder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = convertView;</span><br><span class="line">            <span class="comment">//  重新获取ViewHolder</span></span><br><span class="line">            viewHolder = (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        viewHolder.fruitText.setText(fruit.getName());</span><br><span class="line">        viewHolder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        <span class="comment">//返回布局</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitText;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>新增一个内部类ViewHolder，用于对控件的实例进行缓存。当covertView为null时，创建一个ViewHolder对象，并将控件的实例都存放在ViewHolder里，然后调用View的setTag()方法，将ViewHolder对象存储在View中。当convertView不为null时，则调用View的getTag()方法，将ViewHolder取出来。这样所有控件的实例都缓存在了ViewHolder里，就没必要每次都通过findViewById()方法来获取控件实例了。</p><h3 id="4-ListView的点击事件"><a href="#4-ListView的点击事件" class="headerlink" title="4.ListView的点击事件"></a>4.ListView的点击事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//  初始化水果数据</span></span><br><span class="line">        initFruits();</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(MainActivity.<span class="keyword">this</span>, R.layout.fruit_item, fruitList);</span><br><span class="line">        ListView listView = findViewById(R.id.listView);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">        <span class="comment">//  增加item的点击事件</span></span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                Fruit fruit = fruitList.get(position);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p>由于ListView需要性能优化，以及扩展性不够好，只能实现数据纵向滚动的效果，如果想要实现横向滚动的话，ListView就做不到了。</p><p>为此，Android提供了更强大的RecyclerView。</p><blockquote><p>ListView已经不被Google官方推荐使用了，在布局设计的Legacy库里</p></blockquote><h3 id="1-RecyclerView的基本用法"><a href="#1-RecyclerView的基本用法" class="headerlink" title="1.RecyclerView的基本用法"></a>1.RecyclerView的基本用法</h3><p>直接更改上面ListView的代码，为RecyclerView准备一个适配器，新建FruitAdapter类，让之歌适配器继承自RecyclerView.Adapter，并将泛型指定为FruitAdapter.ViewHolder，ViewHolder是我们在FruitAdapter中定义的一个内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitText;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            fruitImage = itemView.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitText = itemView.findViewById(R.id.fruit_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//  在该方法中将fruit_item布局加载进来，然后创建ViewHolder实例的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//  对RecyclerView子项的数据赋值，会在每个子项被滚动到屏幕内的时候执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Fruit fruit = fruitList.get(position);</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        holder.fruitText.setText(fruit.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//  告诉RecyclerView一共有多少子项</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fruitList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改MainActivity中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//  初始化水果数据</span></span><br><span class="line">        initFruits();</span><br><span class="line">        RecyclerView recyclerView = findViewById(R.id.listView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  创建一个LayoutManager对象，LayoutManager用于指定RecyclerView的布局方式</span></span><br><span class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//  这里使用的LinearLayoutManager是线性布局的意思</span></span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Apple&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.yellow);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现横向滚动和瀑布流布局"><a href="#2-实现横向滚动和瀑布流布局" class="headerlink" title="2.实现横向滚动和瀑布流布局"></a>2.实现横向滚动和瀑布流布局</h3><p>对fruit_item布局进行修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改MainActivity的onCreate()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//  初始化水果数据</span></span><br><span class="line">        initFruits();</span><br><span class="line">        RecyclerView recyclerView = findViewById(R.id.listView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  创建一个LayoutManager对象，LayoutManager用于指定RecyclerView的布局方式</span></span><br><span class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//  设置为水平方向</span></span><br><span class="line">        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>除了LinearLayoutManager之外，RecyclerView还提供了GridLayoutManager和StaggeredGridLayoutManager两种内置的布局排列方式。GridLayoutManager用于实现网格布局，StaggeredGridLayoutManager用于实现瀑布流布局。</p><p>为实现瀑布流布局，先修改fruit_item.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改MainActivity中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//  初始化水果数据</span></span><br><span class="line">        initFruits();</span><br><span class="line">        RecyclerView recyclerView = findViewById(R.id.listView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  创建一个StaggeredGridLayoutManager对象，第一个参数指定布局的列数，第二个参数 用于指定布局的排列方向</span></span><br><span class="line">        StaggeredGridLayoutManager layoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">        <span class="comment">//  设置为水平方向</span></span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Fruit apple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Apple&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            Fruit banana = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Banana&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            Fruit grape = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Grape&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Pineapple&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Strawberry&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Watermelon&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Cherry&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            Fruit mango = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Mango&quot;</span>), R.drawable.yellow);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将字符串随机重复几遍</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRandomLengthName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> len = random.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            stringBuilder.append(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-RecyclerView的点击事件"><a href="#3-RecyclerView的点击事件" class="headerlink" title="3.RecyclerView的点击事件"></a>3.RecyclerView的点击事件</h3><p>ListView在点击事件上的处理并不够好，setOnItemClickListener()方法注册的是子项的点击事件，但是如果想要点击的是子项里的具体某一个按钮呢？虽然ListView也能做到，但是很麻烦。</p><p>RecyclerView直接摒弃了子项点击事件的监听器，所有点击事件都由具体的View去注册。</p><p>学习如何在RecyclerView中注册点击事件，修改FruitAdapter中的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">public class FruitAdapter extends RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Fruit&gt; fruitList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static class ViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line">        View fruitView;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitText;</span><br><span class="line"></span><br><span class="line">        public ViewHolder(@NonNull View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            fruitView = itemView;</span><br><span class="line">            fruitImage = itemView.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitText = itemView.findViewById(R.id.fruit_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FruitAdapter(List&lt;Fruit&gt; fruitList) &#123;</span><br><span class="line">        this.fruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    //  在该方法中将fruit_item布局加载进来，然后创建ViewHolder实例的</span><br><span class="line">    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, false);</span><br><span class="line">        ViewHolder holder = new ViewHolder(view);</span><br><span class="line">        holder.fruitView.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                int position = holder.getAdapterPosition();</span><br><span class="line">                Fruit fruit = fruitList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), &quot;clicked view &quot;+fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        holder.fruitImage.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                int position = holder.getAdapterPosition();</span><br><span class="line">                Fruit fruit = fruitList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), &quot;click image&quot;+ fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    //  对RecyclerView子项的数据赋值，会在每个子项被滚动到屏幕内的时候执行</span><br><span class="line">    public void onBindViewHolder(@NonNull ViewHolder holder, int position) &#123;</span><br><span class="line">        Fruit fruit = fruitList.get(position);</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        holder.fruitText.setText(fruit.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    //  告诉RecyclerView一共有多少子项</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return fruitList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Android中visibility属性VISIBLE、INVISIBLE、GONE的区别"><a href="#Android中visibility属性VISIBLE、INVISIBLE、GONE的区别" class="headerlink" title="Android中visibility属性VISIBLE、INVISIBLE、GONE的区别"></a>Android中visibility属性VISIBLE、INVISIBLE、GONE的区别</h3><p>大部分控件都有visibility这个属性，其属性有3个分别为“visible ”、“invisible”、“gone”。主要用来设置控制控件的显示和隐藏。</p><p>INVISIBLE和GONE的主要区别是：当控件visibility属性为INVISIBLE时，界面保留了view控件所占有的空间；而控件属性为GONE时，界面则不保留view控件所占有的空间。</p><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><blockquote><p>碎片（Fragment）是一种可以嵌在活动当中的UI片段，它能让程序更加合理和充分的利用大屏幕空间。在平板上应用得非常广泛</p></blockquote><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><p>数据持久化就是指将那些内存中的瞬时数据保存到存储设备中，保证即时在手机或电脑关机的情况下，这些数据仍然不会丢失。保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术提供了一种机制可以让数据在瞬时状态和持久状态之间进行转换。</p><p>Android系统主要提供了3种方式用于简单地实现数据持久化功能，即文件存储、SharedPreferences存储以及数据库存储。也可以将数据保存在手机的SD卡中，不过使用上面3种会更简单一些，并且更安全。</p><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p>文件存储是Android中最基本的一种数据存储方式，它不对存储的内容进行任何格式化处理，所有数据都原封不动的保存在文件中，因此比较适合存储一些简单地文本数据或二进制数据。</p><p>如果想使用文件存储的方式保存一些复杂的文本数据，就需要定义一套自己的格式规范，这样方便之后把数据从文件中解析出来。</p><h3 id="1-将数据存储到文件中"><a href="#1-将数据存储到文件中" class="headerlink" title="1. 将数据存储到文件中"></a>1. 将数据存储到文件中</h3><p>Context类提供了openFileOutput()方法，可以用于将数据存储到指定的文件中。</p><blockquote><p>这个方法接收两个参数，第一个参数是文件名，在文件创建时使用，<strong>注意指定的文件名不可以包含路径</strong>，因为所有文件都是默认存储在<code>/data/data/&lt;package name&gt;/files/</code>目录下；第二个参数是文件的操作模式，主要有两种模式可选，MODE_PRIVATE和MODE_APPEND。</p><p>MODE_PRIVATE 默认的操作模式，表示当指定同样文件名时，所写入内容会覆盖原文件的内容</p><p>MODE_APPEND 表示如果文件已存在，就往文件里面追加内容，不创建新文件</p></blockquote><p>openFileOutput()方法返回的是一个FIleOutputStream对象，得到这个对象之后就可以使用Java流的方式将数据写入到文件中了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在布局文件中创建一个EditText输入框，然后在MainActivity中onDestroy()方法中保存输入的文本，退出程序后，在Android Studio</span></span><br><span class="line"><span class="comment">//的Device File Explorer查找对应的包名对应的程序，file文件里面会出现输入框输入的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        editText = findViewById(R.id.edit_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String text)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = openFileOutput(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE);</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">            writer.write(text);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        String inputText = editText.getText().toString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            save(inputText);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-从文件中读取数据"><a href="#2-从文件中读取数据" class="headerlink" title="2.从文件中读取数据"></a>2.从文件中读取数据</h3><p>Context类还提供了一个openFileInput()方法，用于从文件中读取数据。</p><blockquote><p>它只接收一个参数，即读取的文件名，然后系统会自动到<code>/data/data/&lt;package name&gt;/files/</code>目录下去加载这个文件，并返回一个FileInputStream对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改上面的程序，读取文件中的数据，使得每次启动程序时EditText中能保留我们上次输入的内容</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        editText = findViewById(R.id.edit_text);</span><br><span class="line">        String inputText = load();</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(inputText)) &#123;</span><br><span class="line">            editText.setText(inputText);</span><br><span class="line">            <span class="comment">//将输入光标移动到文本的末尾位置以便于继续输入</span></span><br><span class="line">            editText.setSelection(editText.length());</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;Restoring succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  读取文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = openFileInput(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="SharedPreferences存储"><a href="#SharedPreferences存储" class="headerlink" title="SharedPreferences存储"></a>SharedPreferences存储</h2><p>不同于文件的存储方式，SharedPreferences是使用键值对的方式来存储数据的。当保存一条数据时，需要给这条数据提供一个对应的键，在读取数据的时候可以通过这个键把相应的值取出来。</p><h3 id="1-将数据存储到SharedPreferences中"><a href="#1-将数据存储到SharedPreferences中" class="headerlink" title="1.将数据存储到SharedPreferences中"></a>1.将数据存储到SharedPreferences中</h3><p>想要使用SharedPreferences存储数据，首先要获取到SharedPreferences对象。</p><p>Android主要提供了3种方法用于得到SharedPreferences对象。</p><ol><li><p>Context类中的getSharedPreferences()方法</p><blockquote><p>此方法接收两个参数，第一个参数用于指定SharedPreferences文件的名称，如果指定文件不存在则会创建一个，SharedPreferences文件都是存放在<code>/data/data/&lt;package name&gt;/shared_prefs/</code>目录下。第二个参数用于指定操作模式，<del>目前只有MODE_PRIVATE一种模式可选，即默认操作模式，和直接传入0的效果相同</del></p></blockquote></li><li><p> Activity类中的getPreferences()方法</p></li></ol><blockquote><p>这个方法和Context中的getSharedPreferences()方法很相似，不过它只接收一个操作模式参数，因为使用这个方法时会自动将当前活动的类名作为SharedPreferences的文件名</p></blockquote><ol start="3"><li><p>PreferenceManager类中的getDefaultSharedPreferences()方法</p><blockquote><p>这是一个静态方法，它接收一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences文件。</p></blockquote></li></ol><p>向SHaredPreferences文件中存储数据，主要可以分为3步实现。</p><p>​    （1）调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象。</p><p>​    （2）向SharedPreferences.Editor对象中添加数据，比如添加一个布尔型数据就使用putBoolean()方法，添加一个字符串则使用putString()方法，以此类推</p><p>​    （3）调用apply()方法将添加的数据提交，从而完成数据存储操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击按键，保存数据到文件中，保存的格式为xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">                editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">                editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                editor.apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-从SharedPreferences中读取数据"><a href="#2-从SharedPreferences中读取数据" class="headerlink" title="2.从SharedPreferences中读取数据"></a>2.从SharedPreferences中读取数据</h3><p>SharedPreferences对象中提供了一系列的get方法，用于对存储的数据进行读取，每种get方法都对应SharedPreferences.Editor中的一种put方法，比如读取一个布尔型数据就用getBoolean()方法。</p><blockquote><p>这些get方法都接收两个参数，第一个参数是键，传入存储数据时使用的键就可以得到相应的值；第二个参数是默认值，表示传入的键找不到对应的值时会返回的默认值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加一个Button，返回存储的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button button1, button2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button1 = findViewById(R.id.button1);</span><br><span class="line">        button2 = findViewById(R.id.button2);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">                editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">                editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                editor.apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        button2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                SharedPreferences preferences = getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE);</span><br><span class="line">                String name = preferences.getString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> age = preferences.getInt(<span class="string">&quot;age&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">boolean</span> married = preferences.getBoolean(<span class="string">&quot;married&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现记住密码功能"><a href="#3-实现记住密码功能" class="headerlink" title="3.实现记住密码功能"></a>3.实现记住密码功能</h3><blockquote><p>实际项目需要对密码进行加密</p></blockquote><p>这里只简单编写一个登录界面，并实现记住密码功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginHorizontal</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginVertical</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;用户名&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginHorizontal</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginVertical</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;密码&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/remember&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;记住密码&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/login&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现强制下线的BaseActivity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ForceOfflineReceiver receiver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  onResume()和onPause()可以保证只有处于栈顶的活动才能收到这条强制下线广播，非栈顶的活动不应该也没必要去接收这条广播。</span></span><br><span class="line">    <span class="comment">//  当一个活动失去栈顶位置时就会自动取消广播接收器的注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;com.example.retrofittest.FORCE_OFFLINE&quot;</span>);</span><br><span class="line">        receiver = <span class="keyword">new</span> ForceOfflineReceiver();</span><br><span class="line">        registerReceiver(receiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        <span class="keyword">if</span> (receiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            unregisterReceiver(receiver);</span><br><span class="line">            receiver = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityCollector.addActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ForceOfflineReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</span><br><span class="line">            builder.setTitle(<span class="string">&quot;Warning&quot;</span>);</span><br><span class="line">            builder.setMessage(<span class="string">&quot;You are forced to be offline. Please try login again.&quot;</span>);</span><br><span class="line">            <span class="comment">//  将对话框设置为不可取消</span></span><br><span class="line">            builder.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">            builder.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    ActivityCollector.finishAll();</span><br><span class="line">                    Intent intent1 = <span class="keyword">new</span> Intent(context, LoginActivity.class);</span><br><span class="line">                    context.startActivity(intent1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现LoginActivity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText usernameEdit;</span><br><span class="line">    <span class="keyword">private</span> EditText passwordEdit;</span><br><span class="line">    <span class="keyword">private</span> CheckBox isRemember;</span><br><span class="line">    <span class="keyword">private</span> Button login;</span><br><span class="line">    <span class="keyword">private</span> SharedPreferences.Editor editor;</span><br><span class="line">    <span class="keyword">private</span> SharedPreferences pref;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        usernameEdit = findViewById(R.id.username);</span><br><span class="line">        passwordEdit = findViewById(R.id.password);</span><br><span class="line">        login = findViewById(R.id.login);</span><br><span class="line">        isRemember = findViewById(R.id.remember);</span><br><span class="line">        pref = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pref.getBoolean(<span class="string">&quot;remember password&quot;</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            String username = pref.getString(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            String password = pref.getString(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            usernameEdit.setText(username);</span><br><span class="line">            passwordEdit.setText(password);</span><br><span class="line">            isRemember.setChecked(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String username = usernameEdit.getText().toString();</span><br><span class="line">                String password = passwordEdit.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (username.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;123456&quot;</span>)) &#123;</span><br><span class="line">                    editor = pref.edit();</span><br><span class="line">                    <span class="keyword">if</span> (isRemember.isChecked()) &#123;</span><br><span class="line">                        editor.putBoolean(<span class="string">&quot;remember password&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">                        editor.putString(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">                        editor.putString(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        editor.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                    editor.apply();</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent(LoginActivity.<span class="keyword">this</span>, MainActivity.class);</span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                    finish();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">&quot;用户名或密码错误&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现跳转的MainActivty类,带有强制下线的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button button1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button1 = findViewById(R.id.force_offline);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.example.retrofittest.FORCE_OFFLINE&quot;</span>);</span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及销毁所有Activity的ActivityCollector类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activities.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activities.remove(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Activity activity :</span><br><span class="line">                activities) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!activity.isFinishing())</span><br><span class="line">                activity.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：LoginActivity是程序的主入口，exported需要设置为true，允许其他程序调用，在AndroidManifest清单文件中，不需要在MainActivity中添加父Activity，可以在程序中用intent跳转，更加灵活。</p><h2 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四大组件&quot;&gt;&lt;a href=&quot;#四大组件&quot; class=&quot;headerlink&quot; title=&quot;四大组件&quot;&gt;&lt;/a&gt;四大组件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;四大组件都要在AndroidManifest.xml中注册才能生效&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="复习" scheme="https://xrect.github.io/categories/%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Blog更改位置和Token到期更换</title>
    <link href="https://xrect.github.io/2022/03/04/Blog%E6%9B%B4%E6%94%B9%E4%BD%8D%E7%BD%AE/"/>
    <id>https://xrect.github.io/2022/03/04/Blog%E6%9B%B4%E6%94%B9%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-03-04T06:03:21.000Z</published>
    <updated>2022-03-05T02:25:40.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blog更改位置"><a href="#Blog更改位置" class="headerlink" title="Blog更改位置"></a>Blog更改位置</h1><p>node.js等配置没问题的话，可以直接移动博客源文件（就是包含.deploy_git、.github、source等所有文件信息的文件夹）</p><p>可以直接剪切从C盘移到D盘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Blog更改位置&quot;&gt;&lt;a href=&quot;#Blog更改位置&quot; class=&quot;headerlink&quot; title=&quot;Blog更改位置&quot;&gt;&lt;/a&gt;Blog更改位置&lt;/h1&gt;&lt;p&gt;node.js等配置没问题的话，可以直接移动博客源文件（就是包含.deploy_git、.g</summary>
      
    
    
    
    <category term="博客建站历程" scheme="https://xrect.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Studio上传项目到GitHub</title>
    <link href="https://xrect.github.io/2022/03/04/Android-Studio%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/"/>
    <id>https://xrect.github.io/2022/03/04/Android-Studio%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/</id>
    <published>2022-03-04T05:38:13.000Z</published>
    <updated>2022-03-04T06:09:01.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐阅读：<a href="https://www.cnblogs.com/hyacinthLJP/p/14404437.html">Android Studio 上传本地项目到 GitHub 上</a></p><blockquote><p>从 2020 年 10 月 1 日开始，GitHub 上的所有新仓库都将用中性词「main」命名，取代原来的「master」，因为后者是一个容易让人联想到奴隶制的术语。（由于一场抗议活动导致）</p></blockquote><p><img src="C:\Users\23726\AppData\Roaming\Typora\typora-user-images\image-20220304135845739.png" alt="image-20220304135845739"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>关联GitHub账号时，不要点击add Account（你可能访问不了JetBrains的那个网页），直接点击左下角+号，再添加你自己的令牌就好了</p><blockquote><p>令牌注意保管好，建议备份一下</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;推荐阅读：&lt;a href=&quot;https://www.cnblogs.com/hyacinthLJP/p/14404437.html&quot;&gt;And</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="GitHub" scheme="https://xrect.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Java核心API</title>
    <link href="https://xrect.github.io/2022/03/02/Java%E6%A0%B8%E5%BF%83API/"/>
    <id>https://xrect.github.io/2022/03/02/Java%E6%A0%B8%E5%BF%83API/</id>
    <published>2022-03-02T10:17:10.000Z</published>
    <updated>2022-03-02T10:17:10.487Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Activity的生命周期和启动模式</title>
    <link href="https://xrect.github.io/2022/03/02/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xrect.github.io/2022/03/02/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-02T10:16:23.000Z</published>
    <updated>2022-03-02T10:16:23.123Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>单位和尺寸</title>
    <link href="https://xrect.github.io/2022/02/11/%E5%8D%95%E4%BD%8D%E5%92%8C%E5%B0%BA%E5%AF%B8/"/>
    <id>https://xrect.github.io/2022/02/11/%E5%8D%95%E4%BD%8D%E5%92%8C%E5%B0%BA%E5%AF%B8/</id>
    <published>2022-02-11T06:36:12.000Z</published>
    <updated>2022-02-11T06:56:56.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="px与pt的区别"><a href="#px与pt的区别" class="headerlink" title="px与pt的区别"></a>px与pt的区别</h1><ol><li><p>px: pixels(像素)</p><blockquote><p>不同设备显示效果相同</p></blockquote></li><li><p>pt: point</p><blockquote><p>一个标准的长度单位，1pt=1/72英寸，用于印刷业，非常简单易用</p></blockquote></li></ol><h1 id="dp与sp的作用"><a href="#dp与sp的作用" class="headerlink" title="dp与sp的作用"></a>dp与sp的作用</h1><ol><li><p>dip: device independent pixels(设备独立像素)</p><blockquote><p>不同设备有不同的显示效果，和设备硬件有关，一般为了支持WVGA、HVGA和QVGA推荐使用这个，不依赖像素</p></blockquote></li><li><p>dp: 就是dip</p></li><li><p>sp: scaled pixels</p><blockquote><p>主要用于字体显示best for textsize</p></blockquote></li></ol><h1 id="LayoutParams"><a href="#LayoutParams" class="headerlink" title="LayoutParams"></a>LayoutParams</h1><p>LayoutParams相当于一个Layout的信息包，他封装了Layout的位置、高、宽等信息</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如，用代码实现界面，需要LayoutParams配置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//        setContentView(R.layout.activity_main);</span></span><br><span class="line"></span><br><span class="line">        LinearLayout linearLayout = <span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</span><br><span class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">        linearLayout.setLayoutParams(layoutParams);</span><br><span class="line"></span><br><span class="line">        TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">        textView.setText(<span class="string">&quot;我是文本&quot;</span>);</span><br><span class="line">        ViewGroup.LayoutParams textLayoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        textView.setLayoutParams(textLayoutParams);</span><br><span class="line"></span><br><span class="line">        linearLayout.addView(textView);</span><br><span class="line">        setContentView(linearLayout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;px与pt的区别&quot;&gt;&lt;a href=&quot;#px与pt的区别&quot; class=&quot;headerlink&quot; title=&quot;px与pt的区别&quot;&gt;&lt;/a&gt;px与pt的区别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;px: pixels(像素)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Handler消息传递机制</title>
    <link href="https://xrect.github.io/2022/01/29/Handler%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
    <id>https://xrect.github.io/2022/01/29/Handler%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</id>
    <published>2022-01-29T07:49:30.000Z</published>
    <updated>2022-01-29T09:29:57.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>出于性能优化考虑，Android的UI操作并不是线程安全的，这意味着如果有多个线程并发操作UI组件，则可能导致线程安全问题。因此，Android规定：只允许UI线程修改Activity里的UI组件。</p><p>当一个程序第一次启动时，Android会同时启动一条主线程（Main Thread），主线程主要负责处理与UI相关的事件，如用户的按键事件、用户接触屏幕的事件及屏幕绘图事件，并把相关的事件分发到对应的组件进行处理，所以，主线程又被叫做UI线程。</p><hr><p>Handler类的主要作用有两个</p><ul><li>在新启动的线程中发送消息</li><li>在主线程中获取、处理消息</li></ul><h2 id="Handler、Looper、MessageQueue的工作原理"><a href="#Handler、Looper、MessageQueue的工作原理" class="headerlink" title="Handler、Looper、MessageQueue的工作原理"></a>Handler、Looper、MessageQueue的工作原理</h2><p>为更好的理解Handler的工作原理，先介绍与Handler一起工作的几个组件。</p><ul><li><p><code>Message</code></p><blockquote><p>Handler接收和处理的消息对象</p></blockquote></li><li><p><code>Looper</code></p><blockquote><p>每个线程只能有一个Looper。t它的loop方法负责读取MessageQueue中的消息，读到消息之后就把消息交给发送该消息的Handler进行处理</p></blockquote></li><li><p><code>MessageQueue</code></p><blockquote><p>消息队列，采用先进先出的方式来管理Message。程序创建Looper对象时，会在它的构造器中创建MessageQueue对象。</p></blockquote></li><li><p><code>Handler</code></p><blockquote><p>两个作用，发送消息和处理消息。程序使用Handler发送消息，由Handler发送的消息必须被送到指定的MessageQueue。</p><p>因此，Handler要正常工作，必须在当前线程有一个MessageQueue，而MessageQueue是由Looper负责管理的，即希望Handler正常工作，当前线程必须有一个Looper对象。</p></blockquote><p>为保证当前线程有Looper对象，有两种情况</p><ul><li><p>在<code>主UI线程</code>中，系统已初始化了一个Looper对象，因此程序直接创建Handler即可，然后可通过Handler来发送消息、处理消息了</p></li><li><p>程序员自己启动的子线程，必须创建一个Looper对象，并启动它。创建Looper对象调用它的<code>prepare()方法</code>即可。接着，调用Looper的静态<code>loop()方法</code>来启动它。</p><blockquote><p>prepare()方法保证每个线程最多一个Looper对象</p><p>loop()方法使用一个死循环不断取出MessageQueue中的消息，并将取出的消息分给该消息对应的Handler进行处理</p></blockquote></li></ul></li></ul><h1 id="实例：使用新线程计算质数"><a href="#实例：使用新线程计算质数" class="headerlink" title="实例：使用新线程计算质数"></a>实例：使用新线程计算质数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该实例允许用户输入一个数值上限，当用户点击“计算”按钮时，应用会将EditText中填入的上限数值发送到新启动的线程中，让该线程来计算该范围内的所有质数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String UPPER_NUM = <span class="string">&quot;upper&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> MyThread myThread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        editText = findViewById(R.id.editText);</span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//  启动新线程</span></span><br><span class="line">        myThread.start();</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//  创建消息</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                msg.what = <span class="number">0x1521</span>;</span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putInt(UPPER_NUM, Integer.parseInt(editText.getText().toString()));</span><br><span class="line">                msg.setData(bundle);</span><br><span class="line">                <span class="comment">//  向新线程中的Handler发送消息</span></span><br><span class="line">                myThread.mHanler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  定义一个线程类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Handler mHanler;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Looper.prepare();</span><br><span class="line">            mHanler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">                <span class="comment">//  定义处理消息的方法</span></span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (msg.what == <span class="number">0x1521</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> upper = msg.getData().getInt(UPPER_NUM);</span><br><span class="line">                        List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        <span class="comment">//  计算从2开始，到upper的质数</span></span><br><span class="line">                        outer:</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= upper; i++) &#123;</span><br><span class="line">                            <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">while</span> (j &lt;= Math.sqrt(i)) &#123;</span><br><span class="line">                                <span class="comment">//  可以整除，则不是质数</span></span><br><span class="line">                                <span class="keyword">if</span> (i != <span class="number">2</span> &amp;&amp; i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span> outer;</span><br><span class="line">                                &#125;</span><br><span class="line">                                j++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            nums.add(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//  使用Toast显示统计出来的所有质数</span></span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, nums.toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>UI线程</code>需要响应用户动作，如果在<code>UI线程</code>中执行一个耗时操作，将导致<code>UI线程</code>被阻塞，从而让应用程序失去响应，所以尽量避免在UI线程中执行耗时操作，因为这可能导致：<code>ANR异常</code></p><blockquote><p><code>ANR异常</code>(Application Not Responding)，Android默认约定当UI线程阻塞超过20秒时，将会引发ANR异常。……但现在用户等待2秒应该都会很烦躁。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;出于性能优化考虑，Android的UI操作并不是线程安全的，这意味着如果有多个线程并发操作UI组件，则可能导致线程安全问题。因此，Andro</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="Handler" scheme="https://xrect.github.io/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>博客部署到github上报错</title>
    <link href="https://xrect.github.io/2022/01/26/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A%E6%8A%A5%E9%94%99/"/>
    <id>https://xrect.github.io/2022/01/26/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A%E6%8A%A5%E9%94%99/</id>
    <published>2022-01-26T06:52:24.000Z</published>
    <updated>2022-01-26T07:16:19.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>好久没更新网站，只在本地写了几篇笔记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">//提交后，显示</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">fatal: unable to access &#x27;https://hub.fastgit.org/Xrect/Xrect.github.io.git/&#x27;: OpenSSL SSL_connect: Connection was reset in connection to hub.fastgit.org:443</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\Users\23726\Desktop\Blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:390:28)</span><br><span class="line">      at ChildProcess.cp.emit (C:\Users\23726\Desktop\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="网上解法"><a href="#网上解法" class="headerlink" title="网上解法"></a>网上解法</h1><p>网上解法<del>……好像都是抄的同一个</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解法一</span><br><span class="line"></span><br><span class="line">##进入站点根目录</span><br><span class="line">cd /usr/local/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line">##删除git提交内容文件夹</span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"></span><br><span class="line">##执行</span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"></span><br><span class="line">##最后</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">解法二：说的是git repo配置地址不正确，将https方式变为ssh</span><br><span class="line">（在github改为令牌验证之后，很少用到ssh了，所以应该不是这个。但是可以试一试改变仓库地址，只更换地址，不改变HTTPS的方式，github个人博客仓库，下面有好几个地址选择，有的写着加速源）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##进入站点根目录</span><br><span class="line">cd /usr/local/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line">##删除git提交内容文件夹</span><br><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line">##修改</span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repo: https://github.com/yourname/yourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git</span><br><span class="line"></span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line">##最后</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">解法三：不推荐</span><br><span class="line"></span><br><span class="line">##进入站点根目录</span><br><span class="line">cd /usr/local/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line">##进入depoly文件夹</span><br><span class="line">cd .deploy_git/</span><br><span class="line"></span><br><span class="line">##强制推送</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><h1 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 进入博客根目录,打开_config.yml(尽量不要用记事本,推荐VSCode)</span><br><span class="line">2. 更改git repo地址，去github个人博客仓库下面，点击Code，在四个可选择的复制地址中，试着更换</span><br><span class="line">3. hexo clean</span><br><span class="line">4. hexo g</span><br><span class="line">5. hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;好久没更新网站，只在本地写了几篇笔记&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="deploy" scheme="https://xrect.github.io/tags/deploy/"/>
    
    <category term="hexo" scheme="https://xrect.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android运行时权限</title>
    <link href="https://xrect.github.io/2022/01/26/Android%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/"/>
    <id>https://xrect.github.io/2022/01/26/Android%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/</id>
    <published>2022-01-26T04:42:38.000Z</published>
    <updated>2022-01-26T07:49:08.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>在低于6.0的设备上安装程序时，会出现所安装的程序一共申请了哪些权限，从而可以方便用户决定是否要安装这个程序。但滥用权限的常用软件，常常又必须要安装，导致“店大欺客”。</p><p>为防止常用软件”店大欺客“,更好地保护用户安全和隐私，Android团队在<code>Android6.0</code>系统引用了<strong>运行时权限</strong>。</p><blockquote><p>即用户不需要在安装软件时一次性授权所有申请的权限，而是可以在软件的使用过程中再对某一项权限申请进行授权。</p></blockquote><p>Android将所有权限归为两类：</p><ul><li><p>普通权限</p><blockquote><p>不会直接威胁到用户安全和隐私的权限，系统会自动帮我们进行授权</p></blockquote></li><li><p>危险权限</p><blockquote><p>可能触及用户隐私或者对设备安全性造成影响的权限，需要用户点击授权</p></blockquote></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*点击按钮，拨打10086的电话</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">布局只有一个按钮</span></span><br><span class="line"><span class="comment">Manifest.xml中添加&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"><span class="comment">//绑定按钮</span></span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//  判断是否已经授权，没有授权就申请授权</span></span><br><span class="line">                <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CALL_PHONE&#125;, <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//  授权了就直接去打电话</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    call();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//隐式Intent</span></span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</span><br><span class="line">            <span class="comment">//data部分指定了协议是tel，号码为10086</span></span><br><span class="line">            intent.setData(Uri.parse(<span class="string">&quot;tel:10086&quot;</span>));</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    call();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You denied the permisssion&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;在低于6.0的设备上安装程序时，会出现所安装的程序一共申请了哪些权限，从而可以方便用户决定是否要安装这个程序。但滥用权限的常</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="权限" scheme="https://xrect.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Content Provider</title>
    <link href="https://xrect.github.io/2022/01/25/Content-Provider/"/>
    <id>https://xrect.github.io/2022/01/25/Content-Provider/</id>
    <published>2022-01-25T09:51:00.000Z</published>
    <updated>2022-01-26T09:05:59.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h1><p>内容提供器(Content Provider)主要用于在不同的应用程序之间实现数据共享功能，它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访问数据的安全性。</p><blockquote><p>不同于文件存储和<code>SharedPreferences</code>存储中的两种可读写操作模式，内容提供器可以选择只对哪一部分数据进行共享，从而保证我们程序中的隐私不会有泄露的风险</p></blockquote><h1 id="访问其他程序的数据"><a href="#访问其他程序的数据" class="headerlink" title="访问其他程序的数据"></a>访问其他程序的数据</h1><p>内容提供器的用法一般有两种：</p><ul><li>使用现有的内容提供器来读取和操作相应程序中的数据</li><li>创建自己的内容提供器给我们程序的数据提供外部访问接口</li></ul><h2 id="ContentResolver的基本用法"><a href="#ContentResolver的基本用法" class="headerlink" title="ContentResolver的基本用法"></a>ContentResolver的基本用法</h2><p>对于每一个应用程序来说，如果想要访问内容提供器中共享的数据，就一定要借助Content</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Content-Provider&quot;&gt;&lt;a href=&quot;#Content-Provider&quot; class=&quot;headerlink&quot; title=&quot;Content Provider&quot;&gt;&lt;/a&gt;Content Provider&lt;/h1&gt;&lt;p&gt;内容提供器(Content </summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="四大组件" scheme="https://xrect.github.io/tags/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
    <category term="内容提供器" scheme="https://xrect.github.io/tags/%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Intent</title>
    <link href="https://xrect.github.io/2022/01/20/Intent/"/>
    <id>https://xrect.github.io/2022/01/20/Intent/</id>
    <published>2022-01-20T05:19:18.000Z</published>
    <updated>2022-01-20T12:37:58.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intent和Intent过滤器"><a href="#Intent和Intent过滤器" class="headerlink" title="Intent和Intent过滤器"></a>Intent和Intent过滤器</h1><p><code>Intent</code>是一个消息传递对象，可以从其他应用组件请求操作，常分为显示Intent和隐式Intent</p><h2 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h2><p>通过提供目标应用的软件包名称或完全限定的组件类名来指定可处理<code>Intent</code>的应用。</p><p>一般，会在自己的应用中使用<code>显式Intent</code>来启动组件，这是因为知道要启动的 <code>Activity</code>或服务的类名。例如，启动应用内的新 Activity 以响应用户操作，或者启动服务以在后台下载文件。所以，</p><blockquote><p><code>显式Intent</code>多用在App内部的跳转</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>内部Activity跳转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到下一个Activity  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构建Intent</span></span><br><span class="line"><span class="comment">//Intent 对象携带 Android 系统用来确定要启动哪个组件的信息,，以及收件人组件为了正确执行操作而使用的信息</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line"><span class="comment">// 2. 启动Activity</span></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h2 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h2><p>不指定特定的组件，而是声明要执行的常规操作，从而允许其他应用中的组件来处理。</p><p>例如，如果要在地图上向用户显示位置，则可以使用隐式 Intent，请求另一具有此功能的应用（可能有多个应用符合，然后让用户选择）在地图上显示指定的位置。所以，</p><blockquote><p><code>隐式Intent</code>多用在跨APP之间</p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><strong>共享文本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一个EditText和一个Button，输入文本，单击Button会显示分享文本 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定控件之后,获取输入框内容</span></span><br><span class="line">String text = editText_text.getText().toString();</span><br><span class="line"><span class="comment">//定义要共享的文本的 MIME 类型：</span></span><br><span class="line">String mimeType = <span class="string">&quot;text/plain&quot;</span>;</span><br><span class="line"></span><br><span class="line">ShareCompat.IntentBuilder</span><br><span class="line">                .from(<span class="keyword">this</span>)<span class="comment">//Activity启动此共享的Intent（this）。</span></span><br><span class="line">    .setType(mimeType)<span class="comment">// 要共享的项目的 MIME 类型。</span></span><br><span class="line">                .setChooserTitle(<span class="string">&quot;Share this text with:&quot;</span>) <span class="comment">// 出现在系统应用选择器上的标题。</span></span><br><span class="line">                .setText(text)    <span class="comment">// 要共享的实际文本</span></span><br><span class="line">                .startChooser();  <span class="comment">// 显示系统应用程序选择器并发送Intent.</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：<a href="https://baike.baidu.com/item/MIME/2900607?fr=aladdin">MIME</a></p><p><strong>打开浏览器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一个EditText和一个Button，输入网址，单击Button会打开浏览器显示该网站信息 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定控件之后,获取输入框内容</span></span><br><span class="line">String url = editText_website.getText().toString();</span><br><span class="line"><span class="comment">//  将该字符串编码并解析为 Uri 对象：</span></span><br><span class="line">Uri webpage = Uri.parse(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ACTION_VIEW（查看给定数据）</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, webpage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用该resolveActivity()方法和 Android 包管理器找到一个Activity可以处理的隐式Intent. 确保请求成功解决。</span></span><br><span class="line"><span class="comment">//  该请求将你的Intent操作和数据与Intent设备上已安装应用程序的过滤器相匹配。使用它来确保至少有一个Activity可以处理你的请求。</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;ImplicitIntents&quot;</span>, <span class="string">&quot;Can&#x27;t handle this!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收链接请求信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个项目,不同于上面两个同属一个项目，</span></span><br><span class="line"><span class="comment">//一个TextView文本，接收到上一个程序打开浏览器的请求，把TextView显示为刚刚输入的网址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在OnCreate()中加入如下内容</span></span><br><span class="line"></span><br><span class="line">Intent intent = getIntent();</span><br><span class="line">        <span class="comment">//  获取Intent数据,Intentdata 始终是一个 URI 对象：</span></span><br><span class="line">        Uri uri = intent.getData();</span><br><span class="line">        <span class="comment">//  检查以确保uri变量不是null. 如果该检查通过，则从该 URI 对象创建一个字符串：</span></span><br><span class="line">        <span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String uri_string = <span class="string">&quot;URI:&quot;</span> + uri.toString();</span><br><span class="line">            <span class="comment">//绑定控件</span></span><br><span class="line">            TextView textView = findViewById(R.id.textView);</span><br><span class="line">            textView.setText(uri_string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  &quot;URI: &quot;将上述部分提取到字符串资源 ( uri_label) 中。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>AndroidManifest</code>清单文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在AndroidManifest清单文件中，更改该程序的权限 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     任何具有action.VIEW的Intent           --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     任何隐式的Intent。必须包含此类别才能使Activity接收到隐含的Intent --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      来自网页、电子邮件或其他来源的可浏览链接请求。          --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      协议为http 和主机名的URI developer.android.com。          --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      添加下面的data后，对链接有限制，只有收到http://devloper.android.com，该程序才会有反应;  不然启动上一个程序的打开浏览器，只会打开默认浏览器 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">&quot;http&quot;</span> <span class="attr">android:host</span>=<span class="string">&quot;developer.android.com&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Intent主要用途："><a href="#Intent主要用途：" class="headerlink" title="Intent主要用途："></a>Intent主要用途：</h2><ol><li>启动Activity     </li><li>启动服务</li><li>传递广播</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Intent和Intent过滤器&quot;&gt;&lt;a href=&quot;#Intent和Intent过滤器&quot; class=&quot;headerlink&quot; title=&quot;Intent和Intent过滤器&quot;&gt;&lt;/a&gt;Intent和Intent过滤器&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Intent&lt;/</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="Intent" scheme="https://xrect.github.io/tags/Intent/"/>
    
  </entry>
  
  <entry>
    <title>SharedPreferences存储</title>
    <link href="https://xrect.github.io/2022/01/19/SharedPreferences%E5%AD%98%E5%82%A8/"/>
    <id>https://xrect.github.io/2022/01/19/SharedPreferences%E5%AD%98%E5%82%A8/</id>
    <published>2022-01-19T09:13:05.000Z</published>
    <updated>2022-01-19T09:48:06.823Z</updated>
    
    <content type="html"><![CDATA[<p>SharedPreferences使用键值对的方式来存储数据,支持多种不同的数据类型（整型，字符串，布尔类型）</p><p>多用来存储应用偏好</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SharedPreferences使用键值对的方式来存储数据,支持多种不同的数据类型（整型，字符串，布尔类型）&lt;/p&gt;
&lt;p&gt;多用来存储应用偏好&lt;/p&gt;
&lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="SharedPreferences" scheme="https://xrect.github.io/tags/SharedPreferences/"/>
    
  </entry>
  
  <entry>
    <title>Toast用法</title>
    <link href="https://xrect.github.io/2022/01/18/Toast%E7%94%A8%E6%B3%95/"/>
    <id>https://xrect.github.io/2022/01/18/Toast%E7%94%A8%E6%B3%95/</id>
    <published>2022-01-18T03:02:18.000Z</published>
    <updated>2022-01-19T09:15:14.481Z</updated>
    
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio使用Logcat打印日志</title>
    <link href="https://xrect.github.io/2022/01/17/Android-Studio%E4%BD%BF%E7%94%A8Logcat%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/"/>
    <id>https://xrect.github.io/2022/01/17/Android-Studio%E4%BD%BF%E7%94%A8Logcat%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/</id>
    <published>2022-01-17T09:34:32.000Z</published>
    <updated>2022-01-17T11:37:06.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用日志方法"><a href="#常用日志方法" class="headerlink" title="常用日志方法"></a>常用日志方法</h2><p><strong>方法优先级从高到低：</strong></p><ul><li><p><code>Log.e(String tag, String message)</code>（error）</p><blockquote><p>错误,    tag 表示打印时的标签，用于过滤信息； message一般写为msg 表示打印内容</p></blockquote></li><li><p><code>Log.w(String tag, String message)</code>（warning）</p><blockquote><p>警告</p></blockquote></li><li><p><code>Log.i(String tag, String message)</code>（info）</p><blockquote><p>信息</p></blockquote></li><li><p><code>Log.d(String tag, String message)</code>（debug）</p><blockquote><p>调试</p></blockquote></li><li><p><code>Log.v(String tag, String message)</code>（verbose 冗长的，啰嗦的）</p><blockquote><p>无关紧要     </p></blockquote><p><strong>注意：</strong> </p><blockquote><p>除开发期间，其他任何时候都不应将详细日志编译到您的应用中。虽然会编译调试日志，但会在运行时将其去掉，而错误、警告和信息日志会始终保留。</p></blockquote><p>Debug</p><blockquote><p>Debug是跟踪程序流程的一种模式，可以通过在代码处设置断点，再利用Debug窗口查看，所谓断点是在代码行加入停止点，当程序执行到该行时会暂停，开发者可以从中查看到此行的变量、数值和内容等。</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用日志方法&quot;&gt;&lt;a href=&quot;#常用日志方法&quot; class=&quot;headerlink&quot; title=&quot;常用日志方法&quot;&gt;&lt;/a&gt;常用日志方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方法优先级从高到低：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Log.</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="Logcat" scheme="https://xrect.github.io/tags/Logcat/"/>
    
    <category term="日志" scheme="https://xrect.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
