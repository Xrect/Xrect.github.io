<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乙冗</title>
  
  
  <link href="https://xrect.github.io/atom.xml" rel="self"/>
  
  <link href="https://xrect.github.io/"/>
  <updated>2022-03-04T06:08:57.654Z</updated>
  <id>https://xrect.github.io/</id>
  
  <author>
    <name>Xrect</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blog更改位置和Token到期更换</title>
    <link href="https://xrect.github.io/2022/03/04/Blog%E6%9B%B4%E6%94%B9%E4%BD%8D%E7%BD%AE%E5%92%8CToken%E5%88%B0%E6%9C%9F%E6%9B%B4%E6%8D%A2/"/>
    <id>https://xrect.github.io/2022/03/04/Blog%E6%9B%B4%E6%94%B9%E4%BD%8D%E7%BD%AE%E5%92%8CToken%E5%88%B0%E6%9C%9F%E6%9B%B4%E6%8D%A2/</id>
    <published>2022-03-04T06:03:21.000Z</published>
    <updated>2022-03-04T06:08:57.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blog更改位置"><a href="#Blog更改位置" class="headerlink" title="Blog更改位置"></a>Blog更改位置</h1><p>node.js等配置没问题的话，可以直接移动博客源文件（就是包含.deploy_git、.github、source等所有文件信息的文件夹）</p><p>可以直接剪切从C盘移到D盘</p><h1 id="Token到期及更换"><a href="#Token到期及更换" class="headerlink" title="Token到期及更换"></a>Token到期及更换</h1><p>Blog用的Token最好设置的时间还是长一点吧，不像项目之类的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Blog更改位置&quot;&gt;&lt;a href=&quot;#Blog更改位置&quot; class=&quot;headerlink&quot; title=&quot;Blog更改位置&quot;&gt;&lt;/a&gt;Blog更改位置&lt;/h1&gt;&lt;p&gt;node.js等配置没问题的话，可以直接移动博客源文件（就是包含.deploy_git、.g</summary>
      
    
    
    
    <category term="博客建站历程" scheme="https://xrect.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Studio上传项目到GitHub</title>
    <link href="https://xrect.github.io/2022/03/04/Android-Studio%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/"/>
    <id>https://xrect.github.io/2022/03/04/Android-Studio%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/</id>
    <published>2022-03-04T05:38:13.000Z</published>
    <updated>2022-03-04T06:09:01.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐阅读：<a href="https://www.cnblogs.com/hyacinthLJP/p/14404437.html">Android Studio 上传本地项目到 GitHub 上</a></p><blockquote><p>从 2020 年 10 月 1 日开始，GitHub 上的所有新仓库都将用中性词「main」命名，取代原来的「master」，因为后者是一个容易让人联想到奴隶制的术语。（由于一场抗议活动导致）</p></blockquote><p><img src="C:\Users\23726\AppData\Roaming\Typora\typora-user-images\image-20220304135845739.png" alt="image-20220304135845739"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>关联GitHub账号时，不要点击add Account（你可能访问不了JetBrains的那个网页），直接点击左下角+号，再添加你自己的令牌就好了</p><blockquote><p>令牌注意保管好，建议备份一下</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;推荐阅读：&lt;a href=&quot;https://www.cnblogs.com/hyacinthLJP/p/14404437.html&quot;&gt;And</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="GitHub" scheme="https://xrect.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Java核心API</title>
    <link href="https://xrect.github.io/2022/03/02/Java%E6%A0%B8%E5%BF%83API/"/>
    <id>https://xrect.github.io/2022/03/02/Java%E6%A0%B8%E5%BF%83API/</id>
    <published>2022-03-02T10:17:10.000Z</published>
    <updated>2022-03-02T10:17:10.487Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Activity的生命周期和启动模式</title>
    <link href="https://xrect.github.io/2022/03/02/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xrect.github.io/2022/03/02/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-02T10:16:23.000Z</published>
    <updated>2022-03-02T10:16:23.123Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>单位和尺寸</title>
    <link href="https://xrect.github.io/2022/02/11/%E5%8D%95%E4%BD%8D%E5%92%8C%E5%B0%BA%E5%AF%B8/"/>
    <id>https://xrect.github.io/2022/02/11/%E5%8D%95%E4%BD%8D%E5%92%8C%E5%B0%BA%E5%AF%B8/</id>
    <published>2022-02-11T06:36:12.000Z</published>
    <updated>2022-02-11T06:56:56.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="px与pt的区别"><a href="#px与pt的区别" class="headerlink" title="px与pt的区别"></a>px与pt的区别</h1><ol><li><p>px: pixels(像素)</p><blockquote><p>不同设备显示效果相同</p></blockquote></li><li><p>pt: point</p><blockquote><p>一个标准的长度单位，1pt=1/72英寸，用于印刷业，非常简单易用</p></blockquote></li></ol><h1 id="dp与sp的作用"><a href="#dp与sp的作用" class="headerlink" title="dp与sp的作用"></a>dp与sp的作用</h1><ol><li><p>dip: device independent pixels(设备独立像素)</p><blockquote><p>不同设备有不同的显示效果，和设备硬件有关，一般为了支持WVGA、HVGA和QVGA推荐使用这个，不依赖像素</p></blockquote></li><li><p>dp: 就是dip</p></li><li><p>sp: scaled pixels</p><blockquote><p>主要用于字体显示best for textsize</p></blockquote></li></ol><h1 id="LayoutParams"><a href="#LayoutParams" class="headerlink" title="LayoutParams"></a>LayoutParams</h1><p>LayoutParams相当于一个Layout的信息包，他封装了Layout的位置、高、宽等信息</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如，用代码实现界面，需要LayoutParams配置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//        setContentView(R.layout.activity_main);</span></span><br><span class="line"></span><br><span class="line">        LinearLayout linearLayout = <span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</span><br><span class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">        linearLayout.setLayoutParams(layoutParams);</span><br><span class="line"></span><br><span class="line">        TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">        textView.setText(<span class="string">&quot;我是文本&quot;</span>);</span><br><span class="line">        ViewGroup.LayoutParams textLayoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        textView.setLayoutParams(textLayoutParams);</span><br><span class="line"></span><br><span class="line">        linearLayout.addView(textView);</span><br><span class="line">        setContentView(linearLayout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;px与pt的区别&quot;&gt;&lt;a href=&quot;#px与pt的区别&quot; class=&quot;headerlink&quot; title=&quot;px与pt的区别&quot;&gt;&lt;/a&gt;px与pt的区别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;px: pixels(像素)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Handler消息传递机制</title>
    <link href="https://xrect.github.io/2022/01/29/Handler%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
    <id>https://xrect.github.io/2022/01/29/Handler%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</id>
    <published>2022-01-29T07:49:30.000Z</published>
    <updated>2022-01-29T09:29:57.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>出于性能优化考虑，Android的UI操作并不是线程安全的，这意味着如果有多个线程并发操作UI组件，则可能导致线程安全问题。因此，Android规定：只允许UI线程修改Activity里的UI组件。</p><p>当一个程序第一次启动时，Android会同时启动一条主线程（Main Thread），主线程主要负责处理与UI相关的事件，如用户的按键事件、用户接触屏幕的事件及屏幕绘图事件，并把相关的事件分发到对应的组件进行处理，所以，主线程又被叫做UI线程。</p><hr><p>Handler类的主要作用有两个</p><ul><li>在新启动的线程中发送消息</li><li>在主线程中获取、处理消息</li></ul><h2 id="Handler、Looper、MessageQueue的工作原理"><a href="#Handler、Looper、MessageQueue的工作原理" class="headerlink" title="Handler、Looper、MessageQueue的工作原理"></a>Handler、Looper、MessageQueue的工作原理</h2><p>为更好的理解Handler的工作原理，先介绍与Handler一起工作的几个组件。</p><ul><li><p><code>Message</code></p><blockquote><p>Handler接收和处理的消息对象</p></blockquote></li><li><p><code>Looper</code></p><blockquote><p>每个线程只能有一个Looper。t它的loop方法负责读取MessageQueue中的消息，读到消息之后就把消息交给发送该消息的Handler进行处理</p></blockquote></li><li><p><code>MessageQueue</code></p><blockquote><p>消息队列，采用先进先出的方式来管理Message。程序创建Looper对象时，会在它的构造器中创建MessageQueue对象。</p></blockquote></li><li><p><code>Handler</code></p><blockquote><p>两个作用，发送消息和处理消息。程序使用Handler发送消息，由Handler发送的消息必须被送到指定的MessageQueue。</p><p>因此，Handler要正常工作，必须在当前线程有一个MessageQueue，而MessageQueue是由Looper负责管理的，即希望Handler正常工作，当前线程必须有一个Looper对象。</p></blockquote><p>为保证当前线程有Looper对象，有两种情况</p><ul><li><p>在<code>主UI线程</code>中，系统已初始化了一个Looper对象，因此程序直接创建Handler即可，然后可通过Handler来发送消息、处理消息了</p></li><li><p>程序员自己启动的子线程，必须创建一个Looper对象，并启动它。创建Looper对象调用它的<code>prepare()方法</code>即可。接着，调用Looper的静态<code>loop()方法</code>来启动它。</p><blockquote><p>prepare()方法保证每个线程最多一个Looper对象</p><p>loop()方法使用一个死循环不断取出MessageQueue中的消息，并将取出的消息分给该消息对应的Handler进行处理</p></blockquote></li></ul></li></ul><h1 id="实例：使用新线程计算质数"><a href="#实例：使用新线程计算质数" class="headerlink" title="实例：使用新线程计算质数"></a>实例：使用新线程计算质数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该实例允许用户输入一个数值上限，当用户点击“计算”按钮时，应用会将EditText中填入的上限数值发送到新启动的线程中，让该线程来计算该范围内的所有质数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String UPPER_NUM = <span class="string">&quot;upper&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> MyThread myThread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        editText = findViewById(R.id.editText);</span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//  启动新线程</span></span><br><span class="line">        myThread.start();</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//  创建消息</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                msg.what = <span class="number">0x1521</span>;</span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putInt(UPPER_NUM, Integer.parseInt(editText.getText().toString()));</span><br><span class="line">                msg.setData(bundle);</span><br><span class="line">                <span class="comment">//  向新线程中的Handler发送消息</span></span><br><span class="line">                myThread.mHanler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  定义一个线程类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Handler mHanler;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Looper.prepare();</span><br><span class="line">            mHanler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">                <span class="comment">//  定义处理消息的方法</span></span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (msg.what == <span class="number">0x1521</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> upper = msg.getData().getInt(UPPER_NUM);</span><br><span class="line">                        List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        <span class="comment">//  计算从2开始，到upper的质数</span></span><br><span class="line">                        outer:</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= upper; i++) &#123;</span><br><span class="line">                            <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">while</span> (j &lt;= Math.sqrt(i)) &#123;</span><br><span class="line">                                <span class="comment">//  可以整除，则不是质数</span></span><br><span class="line">                                <span class="keyword">if</span> (i != <span class="number">2</span> &amp;&amp; i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span> outer;</span><br><span class="line">                                &#125;</span><br><span class="line">                                j++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            nums.add(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//  使用Toast显示统计出来的所有质数</span></span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, nums.toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>UI线程</code>需要响应用户动作，如果在<code>UI线程</code>中执行一个耗时操作，将导致<code>UI线程</code>被阻塞，从而让应用程序失去响应，所以尽量避免在UI线程中执行耗时操作，因为这可能导致：<code>ANR异常</code></p><blockquote><p><code>ANR异常</code>(Application Not Responding)，Android默认约定当UI线程阻塞超过20秒时，将会引发ANR异常。……但现在用户等待2秒应该都会很烦躁。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;出于性能优化考虑，Android的UI操作并不是线程安全的，这意味着如果有多个线程并发操作UI组件，则可能导致线程安全问题。因此，Andro</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="Handler" scheme="https://xrect.github.io/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>博客部署到github上报错</title>
    <link href="https://xrect.github.io/2022/01/26/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A%E6%8A%A5%E9%94%99/"/>
    <id>https://xrect.github.io/2022/01/26/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A%E6%8A%A5%E9%94%99/</id>
    <published>2022-01-26T06:52:24.000Z</published>
    <updated>2022-01-26T07:16:19.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>好久没更新网站，只在本地写了几篇笔记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">//提交后，显示</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">fatal: unable to access &#x27;https://hub.fastgit.org/Xrect/Xrect.github.io.git/&#x27;: OpenSSL SSL_connect: Connection was reset in connection to hub.fastgit.org:443</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\Users\23726\Desktop\Blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:390:28)</span><br><span class="line">      at ChildProcess.cp.emit (C:\Users\23726\Desktop\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="网上解法"><a href="#网上解法" class="headerlink" title="网上解法"></a>网上解法</h1><p>网上解法<del>……好像都是抄的同一个</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解法一</span><br><span class="line"></span><br><span class="line">##进入站点根目录</span><br><span class="line">cd /usr/local/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line">##删除git提交内容文件夹</span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"></span><br><span class="line">##执行</span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"></span><br><span class="line">##最后</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">解法二：说的是git repo配置地址不正确，将https方式变为ssh</span><br><span class="line">（在github改为令牌验证之后，很少用到ssh了，所以应该不是这个。但是可以试一试改变仓库地址，只更换地址，不改变HTTPS的方式，github个人博客仓库，下面有好几个地址选择，有的写着加速源）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##进入站点根目录</span><br><span class="line">cd /usr/local/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line">##删除git提交内容文件夹</span><br><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line">##修改</span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repo: https://github.com/yourname/yourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git</span><br><span class="line"></span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line">##最后</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">解法三：不推荐</span><br><span class="line"></span><br><span class="line">##进入站点根目录</span><br><span class="line">cd /usr/local/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line">##进入depoly文件夹</span><br><span class="line">cd .deploy_git/</span><br><span class="line"></span><br><span class="line">##强制推送</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><h1 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 进入博客根目录,打开_config.yml(尽量不要用记事本,推荐VSCode)</span><br><span class="line">2. 更改git repo地址，去github个人博客仓库下面，点击Code，在四个可选择的复制地址中，试着更换</span><br><span class="line">3. hexo clean</span><br><span class="line">4. hexo g</span><br><span class="line">5. hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;好久没更新网站，只在本地写了几篇笔记&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="deploy" scheme="https://xrect.github.io/tags/deploy/"/>
    
    <category term="hexo" scheme="https://xrect.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android运行时权限</title>
    <link href="https://xrect.github.io/2022/01/26/Android%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/"/>
    <id>https://xrect.github.io/2022/01/26/Android%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/</id>
    <published>2022-01-26T04:42:38.000Z</published>
    <updated>2022-01-26T07:49:08.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>在低于6.0的设备上安装程序时，会出现所安装的程序一共申请了哪些权限，从而可以方便用户决定是否要安装这个程序。但滥用权限的常用软件，常常又必须要安装，导致“店大欺客”。</p><p>为防止常用软件”店大欺客“,更好地保护用户安全和隐私，Android团队在<code>Android6.0</code>系统引用了<strong>运行时权限</strong>。</p><blockquote><p>即用户不需要在安装软件时一次性授权所有申请的权限，而是可以在软件的使用过程中再对某一项权限申请进行授权。</p></blockquote><p>Android将所有权限归为两类：</p><ul><li><p>普通权限</p><blockquote><p>不会直接威胁到用户安全和隐私的权限，系统会自动帮我们进行授权</p></blockquote></li><li><p>危险权限</p><blockquote><p>可能触及用户隐私或者对设备安全性造成影响的权限，需要用户点击授权</p></blockquote></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*点击按钮，拨打10086的电话</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">布局只有一个按钮</span></span><br><span class="line"><span class="comment">Manifest.xml中添加&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"><span class="comment">//绑定按钮</span></span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//  判断是否已经授权，没有授权就申请授权</span></span><br><span class="line">                <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CALL_PHONE&#125;, <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//  授权了就直接去打电话</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    call();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//隐式Intent</span></span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</span><br><span class="line">            <span class="comment">//data部分指定了协议是tel，号码为10086</span></span><br><span class="line">            intent.setData(Uri.parse(<span class="string">&quot;tel:10086&quot;</span>));</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    call();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You denied the permisssion&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;在低于6.0的设备上安装程序时，会出现所安装的程序一共申请了哪些权限，从而可以方便用户决定是否要安装这个程序。但滥用权限的常</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="权限" scheme="https://xrect.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Content Provider</title>
    <link href="https://xrect.github.io/2022/01/25/Content-Provider/"/>
    <id>https://xrect.github.io/2022/01/25/Content-Provider/</id>
    <published>2022-01-25T09:51:00.000Z</published>
    <updated>2022-01-26T09:05:59.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h1><p>内容提供器(Content Provider)主要用于在不同的应用程序之间实现数据共享功能，它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访问数据的安全性。</p><blockquote><p>不同于文件存储和<code>SharedPreferences</code>存储中的两种可读写操作模式，内容提供器可以选择只对哪一部分数据进行共享，从而保证我们程序中的隐私不会有泄露的风险</p></blockquote><h1 id="访问其他程序的数据"><a href="#访问其他程序的数据" class="headerlink" title="访问其他程序的数据"></a>访问其他程序的数据</h1><p>内容提供器的用法一般有两种：</p><ul><li>使用现有的内容提供器来读取和操作相应程序中的数据</li><li>创建自己的内容提供器给我们程序的数据提供外部访问接口</li></ul><h2 id="ContentResolver的基本用法"><a href="#ContentResolver的基本用法" class="headerlink" title="ContentResolver的基本用法"></a>ContentResolver的基本用法</h2><p>对于每一个应用程序来说，如果想要访问内容提供器中共享的数据，就一定要借助Content</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Content-Provider&quot;&gt;&lt;a href=&quot;#Content-Provider&quot; class=&quot;headerlink&quot; title=&quot;Content Provider&quot;&gt;&lt;/a&gt;Content Provider&lt;/h1&gt;&lt;p&gt;内容提供器(Content </summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="四大组件" scheme="https://xrect.github.io/tags/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
    <category term="内容提供器" scheme="https://xrect.github.io/tags/%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Intent</title>
    <link href="https://xrect.github.io/2022/01/20/Intent/"/>
    <id>https://xrect.github.io/2022/01/20/Intent/</id>
    <published>2022-01-20T05:19:18.000Z</published>
    <updated>2022-01-20T12:37:58.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intent和Intent过滤器"><a href="#Intent和Intent过滤器" class="headerlink" title="Intent和Intent过滤器"></a>Intent和Intent过滤器</h1><p><code>Intent</code>是一个消息传递对象，可以从其他应用组件请求操作，常分为显示Intent和隐式Intent</p><h2 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h2><p>通过提供目标应用的软件包名称或完全限定的组件类名来指定可处理<code>Intent</code>的应用。</p><p>一般，会在自己的应用中使用<code>显式Intent</code>来启动组件，这是因为知道要启动的 <code>Activity</code>或服务的类名。例如，启动应用内的新 Activity 以响应用户操作，或者启动服务以在后台下载文件。所以，</p><blockquote><p><code>显式Intent</code>多用在App内部的跳转</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>内部Activity跳转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到下一个Activity  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构建Intent</span></span><br><span class="line"><span class="comment">//Intent 对象携带 Android 系统用来确定要启动哪个组件的信息,，以及收件人组件为了正确执行操作而使用的信息</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line"><span class="comment">// 2. 启动Activity</span></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h2 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h2><p>不指定特定的组件，而是声明要执行的常规操作，从而允许其他应用中的组件来处理。</p><p>例如，如果要在地图上向用户显示位置，则可以使用隐式 Intent，请求另一具有此功能的应用（可能有多个应用符合，然后让用户选择）在地图上显示指定的位置。所以，</p><blockquote><p><code>隐式Intent</code>多用在跨APP之间</p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><strong>共享文本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一个EditText和一个Button，输入文本，单击Button会显示分享文本 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定控件之后,获取输入框内容</span></span><br><span class="line">String text = editText_text.getText().toString();</span><br><span class="line"><span class="comment">//定义要共享的文本的 MIME 类型：</span></span><br><span class="line">String mimeType = <span class="string">&quot;text/plain&quot;</span>;</span><br><span class="line"></span><br><span class="line">ShareCompat.IntentBuilder</span><br><span class="line">                .from(<span class="keyword">this</span>)<span class="comment">//Activity启动此共享的Intent（this）。</span></span><br><span class="line">    .setType(mimeType)<span class="comment">// 要共享的项目的 MIME 类型。</span></span><br><span class="line">                .setChooserTitle(<span class="string">&quot;Share this text with:&quot;</span>) <span class="comment">// 出现在系统应用选择器上的标题。</span></span><br><span class="line">                .setText(text)    <span class="comment">// 要共享的实际文本</span></span><br><span class="line">                .startChooser();  <span class="comment">// 显示系统应用程序选择器并发送Intent.</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：<a href="https://baike.baidu.com/item/MIME/2900607?fr=aladdin">MIME</a></p><p><strong>打开浏览器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一个EditText和一个Button，输入网址，单击Button会打开浏览器显示该网站信息 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定控件之后,获取输入框内容</span></span><br><span class="line">String url = editText_website.getText().toString();</span><br><span class="line"><span class="comment">//  将该字符串编码并解析为 Uri 对象：</span></span><br><span class="line">Uri webpage = Uri.parse(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ACTION_VIEW（查看给定数据）</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, webpage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用该resolveActivity()方法和 Android 包管理器找到一个Activity可以处理的隐式Intent. 确保请求成功解决。</span></span><br><span class="line"><span class="comment">//  该请求将你的Intent操作和数据与Intent设备上已安装应用程序的过滤器相匹配。使用它来确保至少有一个Activity可以处理你的请求。</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;ImplicitIntents&quot;</span>, <span class="string">&quot;Can&#x27;t handle this!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收链接请求信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个项目,不同于上面两个同属一个项目，</span></span><br><span class="line"><span class="comment">//一个TextView文本，接收到上一个程序打开浏览器的请求，把TextView显示为刚刚输入的网址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在OnCreate()中加入如下内容</span></span><br><span class="line"></span><br><span class="line">Intent intent = getIntent();</span><br><span class="line">        <span class="comment">//  获取Intent数据,Intentdata 始终是一个 URI 对象：</span></span><br><span class="line">        Uri uri = intent.getData();</span><br><span class="line">        <span class="comment">//  检查以确保uri变量不是null. 如果该检查通过，则从该 URI 对象创建一个字符串：</span></span><br><span class="line">        <span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String uri_string = <span class="string">&quot;URI:&quot;</span> + uri.toString();</span><br><span class="line">            <span class="comment">//绑定控件</span></span><br><span class="line">            TextView textView = findViewById(R.id.textView);</span><br><span class="line">            textView.setText(uri_string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  &quot;URI: &quot;将上述部分提取到字符串资源 ( uri_label) 中。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>AndroidManifest</code>清单文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在AndroidManifest清单文件中，更改该程序的权限 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     任何具有action.VIEW的Intent           --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     任何隐式的Intent。必须包含此类别才能使Activity接收到隐含的Intent --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      来自网页、电子邮件或其他来源的可浏览链接请求。          --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      协议为http 和主机名的URI developer.android.com。          --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      添加下面的data后，对链接有限制，只有收到http://devloper.android.com，该程序才会有反应;  不然启动上一个程序的打开浏览器，只会打开默认浏览器 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">&quot;http&quot;</span> <span class="attr">android:host</span>=<span class="string">&quot;developer.android.com&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Intent主要用途："><a href="#Intent主要用途：" class="headerlink" title="Intent主要用途："></a>Intent主要用途：</h2><ol><li>启动Activity     </li><li>启动服务</li><li>传递广播</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Intent和Intent过滤器&quot;&gt;&lt;a href=&quot;#Intent和Intent过滤器&quot; class=&quot;headerlink&quot; title=&quot;Intent和Intent过滤器&quot;&gt;&lt;/a&gt;Intent和Intent过滤器&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Intent&lt;/</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="Intent" scheme="https://xrect.github.io/tags/Intent/"/>
    
  </entry>
  
  <entry>
    <title>SharedPreferences存储</title>
    <link href="https://xrect.github.io/2022/01/19/SharedPreferences%E5%AD%98%E5%82%A8/"/>
    <id>https://xrect.github.io/2022/01/19/SharedPreferences%E5%AD%98%E5%82%A8/</id>
    <published>2022-01-19T09:13:05.000Z</published>
    <updated>2022-01-19T09:48:06.823Z</updated>
    
    <content type="html"><![CDATA[<p>SharedPreferences使用键值对的方式来存储数据,支持多种不同的数据类型（整型，字符串，布尔类型）</p><p>多用来存储应用偏好</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SharedPreferences使用键值对的方式来存储数据,支持多种不同的数据类型（整型，字符串，布尔类型）&lt;/p&gt;
&lt;p&gt;多用来存储应用偏好&lt;/p&gt;
&lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="SharedPreferences" scheme="https://xrect.github.io/tags/SharedPreferences/"/>
    
  </entry>
  
  <entry>
    <title>Toast用法</title>
    <link href="https://xrect.github.io/2022/01/18/Toast%E7%94%A8%E6%B3%95/"/>
    <id>https://xrect.github.io/2022/01/18/Toast%E7%94%A8%E6%B3%95/</id>
    <published>2022-01-18T03:02:18.000Z</published>
    <updated>2022-01-19T09:15:14.481Z</updated>
    
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio使用Logcat打印日志</title>
    <link href="https://xrect.github.io/2022/01/17/Android-Studio%E4%BD%BF%E7%94%A8Logcat%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/"/>
    <id>https://xrect.github.io/2022/01/17/Android-Studio%E4%BD%BF%E7%94%A8Logcat%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/</id>
    <published>2022-01-17T09:34:32.000Z</published>
    <updated>2022-01-17T11:37:06.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用日志方法"><a href="#常用日志方法" class="headerlink" title="常用日志方法"></a>常用日志方法</h2><p><strong>方法优先级从高到低：</strong></p><ul><li><p><code>Log.e(String tag, String message)</code>（error）</p><blockquote><p>错误,    tag 表示打印时的标签，用于过滤信息； message一般写为msg 表示打印内容</p></blockquote></li><li><p><code>Log.w(String tag, String message)</code>（warning）</p><blockquote><p>警告</p></blockquote></li><li><p><code>Log.i(String tag, String message)</code>（info）</p><blockquote><p>信息</p></blockquote></li><li><p><code>Log.d(String tag, String message)</code>（debug）</p><blockquote><p>调试</p></blockquote></li><li><p><code>Log.v(String tag, String message)</code>（verbose 冗长的，啰嗦的）</p><blockquote><p>无关紧要     </p></blockquote><p><strong>注意：</strong> </p><blockquote><p>除开发期间，其他任何时候都不应将详细日志编译到您的应用中。虽然会编译调试日志，但会在运行时将其去掉，而错误、警告和信息日志会始终保留。</p></blockquote><p>Debug</p><blockquote><p>Debug是跟踪程序流程的一种模式，可以通过在代码处设置断点，再利用Debug窗口查看，所谓断点是在代码行加入停止点，当程序执行到该行时会暂停，开发者可以从中查看到此行的变量、数值和内容等。</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用日志方法&quot;&gt;&lt;a href=&quot;#常用日志方法&quot; class=&quot;headerlink&quot; title=&quot;常用日志方法&quot;&gt;&lt;/a&gt;常用日志方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方法优先级从高到低：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Log.</summary>
      
    
    
    
    <category term="Android学习" scheme="https://xrect.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://xrect.github.io/tags/Android/"/>
    
    <category term="Logcat" scheme="https://xrect.github.io/tags/Logcat/"/>
    
    <category term="日志" scheme="https://xrect.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
